//====== Copyright © 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: Half-Life 2 game definition file (.fgd) 
//
//=============================================================================

@include "base.fgd"

//-------------------------------------------------------------------------
//
// NPCs
//
//-------------------------------------------------------------------------
@BaseClass base(BaseNPC) = TalkNPC
[
	UseSentence(string) : "Use Sentence"
	UnUseSentence(string) : "Un-Use Sentence"

	DontUseSpeechSemaphore(choices) : "Don't Use Speech Semaphore" : 0 : "Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks." =
	[
		0 : "No (Use speech semaphore)"
		1 : "Yes (Don't use speech semaphore)"
	]

	input SpeakResponseConcept(string) : "Speak the specified response concept."
]

@BaseClass base(BaseNPC) = PlayerCompanion
[
	input OutsideTransition(void) : "Use this input to teleport the NPC to a hintnode with the Player Squad Transition Point hint type."
	input EnableAlwaysTransition(void) : "Enable the 'always transition' behavior"
	input DisableAlwaysTransition(void) : "Disable the 'always transition' behavior"
	
	input EnableSpeakWhileScripting(void) : "Allow this NPC to speak responses while in a scripted sequence or while StartScripting is active."
	input DisableSpeakWhileScripting(void) : "Cancels this NPC's ability to speak responses while in a scripted sequence or while StartScripting is active if it was previously enabled by EnableSpeakWhileScripting."
	
	input StartIgnoringPlayerPush(void) : "Adds 'Ignore Player Push' spawnflag"
	input StopIgnoringPlayerPush(void) : "Removes 'Ignore Player Push' spawnflag"
	
	AlwaysTransition(choices) : "Always transition" : "No" : "If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume." =
	[
		0 : "No"
		1 : "Yes"
	]

	DontPickupWeapons(choices) : "Prevent picking up weapons?" : "No" : "If yes, this NPC will NOT be allowed to pick up weapons they find on the ground." =
	[
		0 : "No"
		1 : "Yes"	
	]

	GameEndAlly(choices) : "Is this a vital ally?" : "No" : "If yes, this NPC will cause the game to end if killed." =
	[
		0 : "No"
		1 : "Yes"	
	]

	input MakeGameEndAlly(void) : "Make this NPC a game end ally."
	input MakeRegularAlly(void) : "Make this NPC a regular ally."

	input EnableWeaponPickup(void) : "Enable Weapon Pickup"
	input DisableWeaponPickup(void) : "Disable Weapon Pickup"

	input GiveWeapon(string) : "Gives the NPC a weapon of the specified entity name."
	
	input SetReadinessPanic(void) : "Set readiness to panic state (Special)"
	input SetReadinessLow(void) : "Set readiness to calmest state (Bored)"
	input SetReadinessMedium(void) : "Set readiness to moderate (Alert)"
	input SetReadinessHigh(void) : "Set readiness to highest. (Combat imminent)"
	input LockReadiness(float) : "Lock readiness at current setting for x seconds -1 = forever, 0 = unlock now"
	
	input ClearAllOutputs(void) : "Obliterate every output that this NPC has."

	output OnWeaponPickup(void) : "Fires when this NPC picks a weapon off the ground or a gun rack."
]

@BaseClass base(BaseNPC ) = RappelNPC
[
	waitingtorappel(choices) : "Waiting to Rappel?" : "No" : "If yes, this NPC spawns suspended in air and awaits a BeginRappel input. It will then spawn a zipline and slide down. When it hits the ground, NPC will cut away the line and try to move forward a few feet to make room for the next NPC. The NPC will not attempt to clear its landing space if it cannot do so by taking a few steps forward" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input BeginRappel(void) : "BeginRappel"

	// Outputs
	output OnRappelTouchdown(void) : "Fires when done rappeling"
]

@BaseClass = AlyxInteractable
[
	// Outputs
	output OnAlyxStartedInteraction(void) : "Fired when Alyx begins to interact with this entity."
	output OnAlyxFinishedInteraction(void) : "Fired when Alyx has finished interacting with this entity."

	input InteractivePowerDown(void) : "Shutdown this target."
]

@BaseClass base(Targetname, Origin, Angles, Global) = CombineBallSpawners
[
	spawnflags(Flags) = 
	[
		4096 : "Start inactive" : 1
		8192 : "Combine power supply" : 0
	]

	ballcount(integer) : "Ball count" : 3 : "This is how many balls will be bouncing around inside the spawner"
	minspeed(float) : "Min ball speed" : "300.0" : "The minimum speed of balls that fly in the spawner"
	maxspeed(float) : "Max ball speed" : "600.0" : "The maximum speed of balls that fly in the spawner"
	ballradius(float) : "Ball radius" : "20.0" : "The radius of the energy balls"
	balltype(choices) : "Ball Type" : "Combine Energy Ball 1" =
	[
		0 : "Combine Energy Ball 1"
		1 : "Combine Energy Ball 2"
		2 : "Combine Energy Ball 3"
	]
	ballrespawntime(float) : "Ball Respawn Time" : "4.0f" : "The energy balls respawn time"

	input Enable(void) : "Enable spawning of combine balls"
	input Disable(void) : "Disable spawning of combine balls"

	output OnBallGrabbed(void) : "Fired when a combine ball is grabbed from the field by a mega physcannon"
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitTopSide(void) : "Fired when a combine ball in hits the top side of the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitBottomSide(void) : "Fired when a combine ball in hits the bottom side of the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
	output OnFirstBallReinserted(void) : "Fired when the first combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
]

@PointClass base(BasePropPhysics) studioprop() = prop_combine_ball :
	"A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges "+
	"or other constraints. It can also be configured to break when it takes enough damage."
[
	// Inputs
	input Explode(void) : "Explode"
]

@SolidClass base(Trigger, Angles) = trigger_physics_trap :
	"A volumetric trigger that disintegrates enemies"
[
	dissolvetype(choices) : "Dissolve Type" : "Energy" =
	[
		0 : "Energy"
		1 : "Heavy electrical"
		2 : "Light electrical"
	]
]

@SolidClass base(Trigger) = trigger_weapon_dissolve :
	"A volumetric trigger that dissolves all weapons within it"
[
	emittername(target_destination) : "Emitter Name" : "" : "Name of a single or multiple entities to use as the basis for the emitted effects."

	// Outputs
	output OnDissolveWeapon(void) : "Fires when one weapon is starting to dissolve in the trigger volume."
	output OnChargingPhyscannon(void) : "Fires when the trigger begins to charge the physcannon."

	// Inputs
	input StopSound(void) : "Stops all sounds."
]

@SolidClass base(Trigger) = trigger_weapon_strip :
	"A volumetric trigger that strips combat characters of all weapons"
[
	KillWeapons(choices) : "Kill Weapons" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(CombineBallSpawners) = func_combine_ball_spawner :
    "Spawns Combine balls."
[
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
]

@PointClass base(CombineBallSpawners) = point_combine_ball_launcher :
	"Launches Combine balls."
[
	launchconenoise(float) : "Noise to launch direction" : "0.0" : "Noise in degrees added to the launch direction."
	bullseyename(string) : "Name of bullseye" : "" : "If you select the Attach Bullseye spawnflag, you may specify a name here which will be given to the bullseye."
	maxballbounces(integer) : "Max number of bounces" : 8 : "Maximum number of bounces the balls are allowed to do before they are removed."

	spawnflags(Flags) =
	[
		1 : "Attach Bullseye" : 0
		2 : "Balls should collide against player" : 0
	]

    // Inputs
	input LaunchBall(void) : "Launch a ball from the spawner."
]

@NPCClass base(BaseNPC) studio("models/chefhat.mdl") = npc_swarm : "CPU Swarm"
[
	input FormPathShape(string) : "Tells the group to go distribute themselves along a shape defined by path corner entities" 
	input SetRadius(float) : "Force the group to change the radius (density)"	
	input IsolateElement(integer) : "" 
	input ChaseEntity(string) : ""
	input FormHemisphere(void) : ""
	input FormTwoSpheres(void) : ""
]


@NPCClass base(BaseNPC) studio("models/Weapons/w_grenade.mdl") = npc_grenade_frag : "Hand Grenade"
[
	input SetTimer(float) : "This input makes the grenade live, and specifies how many seconds before it explodes."
	
	output OnDetonate(void) : "Fired when grenade detonates"
]


@NPCClass base(BaseNPC) sphere(sightdist) studio("models/combine_soldier.mdl") = npc_combine_cannon : "Combine Cannon"
[
	sightdist(float) : "Sight radius" : 1024 : "Radius distance at which the cannon is able to aquire enemies."
]

@NPCClass base(BaseNPC) sphere(innerradius) sphere(outerradius) studio("models/combine_camera/combine_camera.mdl") = npc_combine_camera :
	"Combine security camera"
[
	spawnflags(Flags) = 
	[
		32 : "Always Become Angry On New Enemy" : 1
		64 : "Ignore Enemies (Scripted Targets Only)" : 0
		128 : "Start Inactive" : 0
	]
	
	innerradius(integer) : "Inner radius" : 300 : "The camera will only lock onto enemies that are within the inner radius."
	outerradius(integer) : "Outer radius" : 450 : "The camera will flash amber when enemies are within the outer radius, but outside the inner radius."

	minhealthdmg(integer) : "Min req'd damage for hurting camera" : 0
	defaulttarget(target_destination) : "Default target" : "" : "The default target is the entity that the camera follows when it has no other target to track."

	// Inputs
	input Disable(void) : "Disables the camera. If open, the camera closes."
	input Enable(void) : "Enables the camera. If closed, the camera opens."
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input SetDefaultTargetEntity(string) : "Sets the entity for the camera to track when it has nothing better to track, by name."
	input SetTargetEntity(string) : "Sets the entity for the camera to track now, by name."
	input SetAngry(void) : "Causes the camera to become angry as if it has seen something upsetting."
	input SetIdle(void) : "Causes the camera to calm down if it is angry."
	
	output OnFoundPlayer(string) : "Fired when the player is spotted within the inner radius"
	output OnFoundEnemy(void) : "Fired when a non-player enemy is spotted within the inner radius."
	
	output OnDetectedCameraTarget(string) : "Fired when something enters the camera range (if the camera cares about this entity)"
	output OnLostCameraTarget(string) : "Fire when noticed entity leaves camera range"
]


@PointClass base(BaseNPC, Parentname, AlyxInteractable) studio( "models/combine_turrets/ground_turret.mdl" ) = npc_turret_ground : "Combine ground turret"
[
	input Enable(void) : "Turn turret on."
	input Disable(void) : "Turn turret off."

	output OnAreaClear(void) : "Fires when the turret can't find any more enemies (7 second delay)"
]

@PointClass base(Targetname, Angles, Studiomodel) studio( "models/Combine_turrets/Ceiling_turret.mdl" ) = npc_turret_ceiling : "Combine Ceiling Turret"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 1
		64 : "Start Inactive" : 0
		128 : "Never Retire" : 0
		256 : "Out of Ammo" : 0
	]

	minhealthdmg(integer) : "Min req'd damage for hurting turret" : 0		

	// Inputs
	input Enable(void) : "If closed, open."
	input Disable(void) : "If open, close."
	input Toggle(void) : "Toggle - If open, close. If closed, open."

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
]


@PointClass base(Targetname, Angles) studio( "models/Combine_turrets/Floor_turret.mdl" ) = npc_turret_floor : "Combine Floor Turret"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
		128 : "Fast Retire" : 0
		256 : "Out of Ammo" : 0
		512 : "Citizen modified (Friendly)" : 0
	]

	SkinNumber(integer) : "Skin Number" : 0 : "Which skin to use for this turret. Set to 0 to select randomly."

	// Inputs
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input Enable(void) : "Enable the turret."
	input Disable(void) : "Disable the turret."
	input DepleteAmmo(void) : "Depletes all the ammo from a turret, causing it to dry-fire."
	input RestoreAmmo(void) : "Restores ammo to a turret, allowing it to fire live rounds again."
	input SelfDestruct(void) : "Causes the turret to warn and then explode."

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
	output OnPhysGunPickup(void) : "Picked up with physgun"
	output OnPhysGunDrop(void) : "Released by physgun"
]

@BaseClass base(BaseNPC) = VehicleDriverNPC
[
	vehicle(target_destination) : "Vehicle to drive"

	spawnflags(Flags) = 
	[
		65536 :  "Start Inactive" : 1
	]

	input StartFiring(void) : "Tell the driver to attack nearby enemies with the vehicle's weaponry (if any)"
	input StopFiring(void) : "Tell the driver to stop attacking nearby enemies with the vehicle's weaponry."
	input GotoPathCorner(string) : "Tell the driver to go to a specific path corner and continue from there."
]

@NPCClass base(VehicleDriverNPC) studio("models/roller.mdl") = npc_vehicledriver : 
	"NPC used to drive a target vehicle."
[
	drivermaxspeed(float) : "Maxspeed (percentage of vehicle's maxspeed)." : 1
	driverminspeed(float) : "MinSpeed (percentage of vehicle's maxspeed)." : 0

	input SetDriversMaxSpeed(float) : "Set the Maxspeed (percentage of vehicle's maxspeed)."
	input SetDriversMinSpeed(float) : "Set the Minspeed (percentage of vehicle's maxspeed)."
	input StartForward(void) : "Tell the driver to start driving."
	input Stop(void) : "Tell the driver to stop driving."
]

@NPCClass base(VehicleDriverNPC) studio("models/roller.mdl") = npc_cranedriver : 
	"NPC used to drive cranes."
[
	releasepause(float) : "Pause time before dropping a ForceDrop specified object." : 0

	// Inputs
	input ForcePickup(string) : "Force the driver to pickup the specified entity (by targetname)"
	input ForceDrop(string) : "Force the driver to drop the currently held object at the specified entity's location."

	// Outputs
	output OnPickedUpObject(void)  : "Fired when the ForcePickup specified object has been picked up."
	output OnDroppedObject(void)  : "Fired when the ForceDrop specified object has been dropped."
	output OnPausingBeforeDrop(void): "Fired at the start of the pause before dropping the ForceDrop specified object."
]

@NPCClass base(VehicleDriverNPC) studio("models/roller.mdl") = npc_apcdriver : 
	"NPC used to drive an APC vehicle."
[
	spawnflags(Flags) = 
	[
		65536 :  "No Rocket Attacks" : 0
		131072 : "No Gun Attacks" : 0
	]

	drivermaxspeed(float) : "Maxspeed (percentage of vehicle's maxspeed)." : 1
	driverminspeed(float) : "MinSpeed (percentage of vehicle's maxspeed)." : 0

	input SetDriversMaxSpeed(float) : "Set the Maxspeed (percentage of vehicle's maxspeed)."
	input SetDriversMinSpeed(float) : "Set the Minspeed (percentage of vehicle's maxspeed)."
	input StartForward(void) : "Tell the driver to start driving."
	input Stop(void) : "Tell the driver to stop driving."

	input DisableFiring(void) : "Disables firing from happening"
	input EnableFiring(void) : "Enables firing to start. Firing is enabled by default"
]


@NPCClass base(BaseNPC,AlyxInteractable) studio() = npc_rollermine : "Roller Mine"
[
	model(studio) : "World model" : "models/roller.mdl"
	behavior(choices) : "Behavior" : 0 : "Which gameplay behavior this should have" =
	[
		0 : "Retail"
		1 : "2003"
	]
	spawnflags(Flags) = 
	[
		65536 :  "Friendly" : 0
		131072 : "Use prop_physics collision rules"	: 0
	]

	startburied(choices) : "Start Buried" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	uniformsightdist(choices) : "Sight Distance" : 0 = 
	[
		0 : "Ignore distant targets not in a vehicle (default)."
		1 : "Equal visibility for all targets."
	]

	input TurnOn(void) : "Restore this rollermine to normal functionality."
	input TurnOff(void) : "Make this rollermine completely inert. Does not run AI and NPCs will ignore it." 

	output OnPhysGunPickup(void) : "Picked up with physgun"
	output OnPhysGunDrop(void) : "Released by physgun"
]

@NPCClass base(BaseNPC) studio("models/missile_defense.mdl") = npc_missiledefense : "Missile Defense"
[
]

@NPCClass base(BaseNPC) studio() = npc_sniper : "Sniper"
[
	model(choices) : "Model" : "models/combine_soldier.mdl" : "2003 Soldier" = 
	[
		"models/combine_soldier.mdl" : "Regular Soldier"
		"models/combine_soldier_prisonguard.mdl" : "Nova Prospekt Soldier"
		"models/combine_super_soldier.mdl" : "Elite Soldier"
		"models/2003/combine_soldier.mdl" : "2003 Soldier"
	]
	
	radius(integer) : "Patience Radius" : 0 : "Sniper will hold fire until the target is within this radius. After that, sniper will always attack, even if the target retreats outside of this radius"
	misses(integer) : "Initial Misses" : 0 : "How many times to miss a target on purpose before beginning to fire accurately."
	beambrightness(integer) : "Beam Brightness (0 to 255)" : 100 : "How bright the laser sight beam should be. (0 - 255)"
	shootZombiesInChest(choices) : "Shoot zombies in chest" : 0 : "If true, aim for chest instead of headcrab. Useful when at great distance and height." =
	[
		0 : "No"
		1 : "Yes"
	]	

	shielddistance(float) : "Bullet shield distance" : 64 : "Obsolete"
	shieldradius(float) : "Bullet shield radius" : 48 : "Obsolete"
	
	PaintInterval(float): "Paint interval" : 1 : "Sniper will keep a target painted for this many seconds before shooting. 'Faster Shooting' sniper flag multiplies this by 0.75."
	PaintIntervalVariance(float): "Paint interval variance" : "0.75" : "When shooting at NPCs, a random number between 0 and this is added to PaintInterval for every shot."
	

	// Inputs
	input EnableSniper(void) : "Enable Shooting"
	input DisableSniper(void) : "Disable Shooting"
	input SetDecoyRadius(integer) : "Set Decoy Radius"
	input SweepTarget(string) : "Sweep a Target"
	input SweepTargetHighestPriority(string) : "Drop everything and sweep this target!"
	input SweepGroupRandomly(string) : "Randomly Sweep a Group"
	input StopSweeping(void) : "Stop any target sweeping operation started by entity I/O"
	input ProtectTarget(target_destination) : "Protect the specified enemy. The sniper will attempt to shoot the enemy nearest the protect target at all times."
	input SetPaintInterval(float) : "Set PaintInterval field."
	input SetPaintIntervalVariance(float) : "Set PaintIntervalVariance field."

	output OnShotFired(void) : "Fires when sniper fires a shot"

	spawnflags(Flags) = 
	[
		65536 :  "Hidden" : 0
		131072 : "Laser Viewcone" : 0
		262144 : "No Corpse" : 0
		524288 : "Start Disabled" : 0
		1048576 : "Faster shooting (Episodic)" : 0
		2097152 : "No sweep away from target (Episodic)" : 0
	]
]


@PointClass base(Targetname, Parentname, EnableDisable) iconsprite("editor/info_target.vmt") sphere(radius) = info_radar_target : "Jalopy Radar Beacon"
[
	radius(float) : "Effective Radius" : 6000 : "How close the Jalopy must be to detect this beacon. If this radius is -1, the range is infinite"

	type(choices) : "Type of target" : 0 = 
	[
		0 : "Generic Citizen Beacon"
		1 : "Magnussen RDU Beacon"
		2 : "Dog"
		3 : "Ally Installation"
	]

	mode(choices) : "Mode" : 0 =
	[
		0 : "Default"
		1 : "Sticky - once detected, ignore effective radius."
	]
]


@PointClass base(Targetname, Angles, EnableDisable) iconsprite("editor/info_target.vmt") = info_target_vehicle_transition : "Vehicle Transition Point"
[
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_snipertarget : "Sniper Target"
[
	speed(integer) : "Sweep to speed" : 2
	groupname(string) : "Group Name"
	spawnflags(Flags) =
	[
		1 : "Shoot Me" : 0
		2 : "No Interruptions" : 0
		// 4 : "Snap Shot" : 0 OBSOLETE NOW but don't overwrite, in case some levels need legacy support.
		8 : "Resume if Interrupted" : 0
		16: "Snap to me" : 0
	]
]

@PointClass base(Targetname, Angles) studio() = prop_thumper : "Thumper"
[
	model(studio) : "World model" : "models/props_combine/CombineThumper002.mdl"

	dustscale(choices) : "Dust Scale" : "Small Thumper" =
	[
		128 : "Small Thumper"
		256 : "Large Thumper"
	]

	input Enable(void) : "Enable Thumper"
	input Disable(void) : "Disable Thumper"

	output OnThumped(void) : "Fires when thumper impacts the ground."
	
	EffectRadius(integer) : "Effect Radius" : 1000 : "Radius of the thumper's sound. EPISODIC ONLY."
]

@NPCClass base(BaseNPC) studio() sphere() = npc_antlion :
	"Antlions will run away from ai_sound, type: Thumper."
[
	model(studio) : "World model" : "models/2003/antlion.mdl"
	startburrowed(choices) : "Start Burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		65536 : "Burrow when eluded" : 0
		131072 : "Use Ground Checks" : 0
		262144 : "Worker Type" : 0
	]

	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	
	ignorebugbait(choices) : "Ignore Bugbait" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	unburroweffects(choices) : "Suppress unburrow effects" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	input Unburrow(void) : "Unburrow from the ground"
	input Burrow(void) : "Burrow into the ground"
	input BurrowAway(void) : "Burrow into the ground and remove the antlion"
	input FightToPosition(string) : "Fight to position"
	input EnableJump(void) : "Allow non-navigational jumping"
	input DisableJump(void) : "Disallow non-navigational jumping"
	input IgnoreBugbait(void) : "Ignore bugbait"
	input HearBugbait(void) : "Hear bugbait"
	input StartFollowingTarget(string) : "Input descriptions aren't shown anywhere so why the fuck have them"
	input StopFollowingAll(void) : "Clear follow target if have one"

	output	OnReachedFightGoal(void) : "Fires when the antlion reaches his specified fight-to location"
	output	OnUnBurrowed(void) : "Fires when the antlion unburrows"
	output	OnPlayerInAlertRadius(void) : "Fires every think tick as long as the player is within alert radius"

]

@NPCClass base(BaseNPC) studio() = npc_antlionguard : "Antlion Guard"
[
	model(studio) : "World model" : "models/antlion_guard.mdl"
	spawnflags(Flags) =
	[
		65536 : "Create server-side ragdoll on death" : 0
		131072 : "Use inside footsteps" : 0
	]

	startburrowed(choices) : "Start Burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	allowbark(choices) : "Allow Bark" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	cavernbreed(choices) : "Cavern Guard Model and Texture" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	incavern(choices) : "Use inside-Cavern Behavior" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	shovetargets(string) : "Shove Targets" : ""

	// Inputs
	input Unburrow(void) : "Unburrow from the ground"
	input SetShoveTarget(string) : "Sets a shove target to attack"
	input SetChargeTarget(string) : "Sets a charge target to attack.  Parameters are the name of the entity to start at and the name of the entity to charge towards, separated by a space (i.e. start target)"
	input ClearChargeTarget(void) : "Clear the charge target"
	input SetCoverFromAttack(integer) : "Sets whether or not the creature will protect itself from attacks"
	input Ragdoll(void) : "Causes the antlion guard to die, regardless of health"
	input EnableBark(void) : "Allow the antlion guard to try and summon antlions"
	input DisableBark(void) : "Stop the antlion guard from trying to summon antlions"
	input InvestigateHint(string) : "Sniff around at a hint group until told otherwise"
	input StopInvestigating(void) : "Stop trying to sniff out the player"

	input EnablePreferPhysicsAttack(void) : "Prefer to use physics attacks if at all possible, even when inside a cavern."
	input DisablePreferPhysicsAttack(void) : "Do not prefer to use physics attacks if at all possible, even when inside a cavern."

		
	// Outputs
	output OnSeeHiddenPlayer(void) : "Fires when the current enemy is seen while trying to hide"
	output OnSmellHiddenPlayer(void) : "Fires when the current enemy is smelled while trying to hide"
	output OnSummon(void) : "Antlion guard is attempting to summon antlions"
]


@NPCClass base(BaseNPC) studio("models/crow.mdl") = npc_crow : "Crow"
[
	input FlyAway( string ) : "This input takes an entity name (targetname) and then tells the crow to use it as its navpoint."
	
	input FlyAwayToATarget( string ) : "Copy/rename of FlyAway input, to make it more clear. Use this input and specify a target (like info_target or similar), then the crow will try to reach it (by navigating through nodes, the usual way)."

	deaf(choices) : "Deaf?" : 0 =
	[
		0 : "No."
		1 : "Yes. Ignore sounds."
	]
]

@NPCClass base(BaseNPC) studio("models/crow.mdl") = npc_bird : "Bird"
[
	input FlyAway( void ) : "Tells the crow to fly away to its hint node navpoint."
]

@NPCClass base(BaseNPC) studio("models/seagull.mdl") = npc_seagull : "Seagull"
[
	input FlyAway( string ) : "Forces the seagull to fly to the nearest crow flyto hint node."

	deaf(choices) : "Deaf?" : 0 =
	[
		0 : "No."
		1 : "Yes. Ignore sounds."
	]
]

@NPCClass base(BaseNPC) studio("models/pigeon.mdl") = npc_pigeon : "Pigeon"
[
	input FlyAway( string ) : "Forces the pigeon to fly to the nearest crow flyto hint node."

	deaf(choices) : "Deaf?" : 0 =
	[
		0 : "No."
		1 : "Yes. Ignore sounds."
	]
]

@NPCClass base(BaseNPC) studio("models/ichthyosaur.mdl") = npc_ichthyosaur : "Ichthyosaur. Not fully functional"
[
]

@BaseClass base(BaseNPC) = BaseHeadcrab
[
	startburrowed(choices) : "Start burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spawnflags(flags) = 
	[
		65536  :  "Start hidden" : 0
		131072 :  "Start hanging from ceiling" : 0
	]

	input BurrowImmediate(void) : "Start hanging from ceiling."
	input Unburrow(void) : "Start hanging from ceiling."

	input StartHangingFromCeiling(void) : "Start hanging from ceiling."
	input DropFromCeiling(void) : "Drop if hanging from ceiling."
]

@NPCClass base(BaseHeadcrab, Parentname) studio() = npc_headcrab : "Headcrab"
[
	model(studio) : "World model" : "models/Headcrabclassic.mdl"
]
@NPCClass base(BaseHeadcrab) studio() = npc_headcrab_fast : "Fast Headcrab"
[
	model(studio) : "World model" : "models/Headcrab.mdl"
]
@NPCClass base(BaseHeadcrab) studio() = npc_headcrab_black : "Black Headcrab"
[
	model(studio) : "World model" : "models/Headcrabblack.mdl"
]

@NPCClass base(Parentname, BaseNPC) iconsprite("editor/bullseye.vmt") color(255 0 0) = npc_bullseye : "Bullseye"
[
	// Unlike other NPCs level designers are allowed to set the health on bullseyes
	health(Integer) : "Health" : 35

	minangle(string) : "Minimum Angle" : "360" : "Angle from the bullseye required for bullseye to be a valid enemy"
	mindist(string) : "Minimum Distance" : "0" : "Distance from the bullseye required for bullseye to be a valid enemy"

	autoaimradius(float) : "Autoaim Radius" : "0" : "Radius of autoaim influence. Use ent_autoaim <picker> to visualize."

	spawnflags(Flags) = 
	[
		65536   : "Not Solid" : 0
		131072  : "Take No Damage" : 0
		262144  : "Enemy Damage Only" : 0
		524288  : "Bleed" : 0
		1048576 : "Perfect Accuracy" : 0
		2097152 : "Collide against physics objects (Creates VPhysics Shadow)" : 0
	]
	output OnTargeted(void) : "Fires when targeted"
	output OnReleased(void) : "Fires when no longer targeted"
]

@NPCClass base(BaseNPC) studio("models/2003/bullsquid.mdl") = npc_bullsquid : "Bullsquid"
[
]

@NPCClass base(Parentname, BaseNPC) size(-16 -16 -16, 16 16 16) color(255 150 0) = npc_enemyfinder : "EnemyFinder"
[
	spawnflags(flags) =
	[
		65536 : "Check Visibility" : 1
		131072 : "APC Visibility checks" : 0
		262144 : "Short memory" : 0
		524288  : "Can be an enemy" : 0
	]
	FieldOfView(string) : "FieldOfView" : "0.2" : "How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)"
	MinSearchDist(integer) : "Min Search Dist" : 0
	MaxSearchDist(integer) : "Max Search Dist" : 2048

	freepass_timetotrigger(float) : "Player pass issue time" : 0 : "Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted"
	freepass_duration(float) : "Player pass duration" : 0 : "After granted 'free pass', the amount of time a target is allowed before reaquire"
	freepass_movetolerance(float) : "Player pass move tolerance" : 120 : "After granted 'free pass', the distance the target is allowed to move before reaquire"
	freepass_refillrate(float) : "Player pass refill rate" : "0.5" : "After free pass begins expiring, how much the time the target gets back for every second they hide again"
	freepass_peektime(float) : "Player pass peek time" : 0 : "How long targets in cover are allowed to peek without penalty"

	StartOn(choices) : "Start On" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input TurnOn(void) : "Turn on: Look for enemies"
	input TurnOff(void) : "Turn off: Stop looking for enemies"

	output OnLostEnemies(void) : "Fires when the enemy finder has no enemies."
	output OnAcquireEnemies(void) : "Fires when the enemy finder acquires enemies."
]

@NPCClass base(Parentname, BaseNPC) size(-16 -16 -16, 16 16 16) color(255 150 0) = npc_enemyfinder_combinecannon : "EnemyFinder Specifically for use with func_tank_combine_cannon"
[
	spawnflags(flags) =
	[
		65536 : "Check Visibility" : 1
		131072 : "APC Visibility checks" : 0
		262144 : "Short memory" : 0
		524288  : "Can be an enemy" : 0
	]
	FieldOfView(string) : "FieldOfView" : "0.2" : "How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)"
	MinSearchDist(integer) : "Min Search Dist" : 0
	MaxSearchDist(integer) : "Max Search Dist" : 2048

	SnapToEnt(target_destination) : "Name of entity to snap to" : "" : "Since it can be hard to position these entities with respect to the func_tank brushwork, you can specify an entity name here and this enemyfinder will position itself at the center of that entity."

	freepass_timetotrigger(float) : "Player pass issue time" : 0 : "Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted"
	freepass_duration(float) : "Player pass duration" : 0 : "After granted 'free pass', the amount of time a target is allowed before reaquire"
	freepass_movetolerance(float) : "Player pass move tolerance" : 120 : "After granted 'free pass', the distance the target is allowed to move before reaquire"
	freepass_refillrate(float) : "Player pass refill rate" : "0.5" : "After free pass begins expiring, how much the time the target gets back for every second they hide again"
	freepass_peektime(float) : "Player pass peek time" : 0 : "How long targets in cover are allowed to peek without penalty"

	StartOn(choices) : "Start On" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input TurnOn(void) : "Turn on: Look for enemies"
	input TurnOff(void) : "Turn off: Stop looking for enemies"
	input SetWideFOVForSeconds(float) : "Gives this enemyfinder a 180 degree viewcone for the number of seconds specified in the parameter override"

	output OnLostEnemies(void) : "Fires when the enemy finder has no enemies."
	output OnAcquireEnemies(void) : "Fires when the enemy finder acquires enemies."
]



@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion ) studio() = npc_citizen : "Citizen"
[

	spawnflags(Flags) =
	[
		65536 : "Follow player on spawn" : 0
		131072 : "Medic" : 0
		262144 : "Random Head" : 1
		524288 : "Ammo Resupplier" : 0
		1048576 : "Not Commandable" : 0
		2097152 : "Don't use Speech Semaphore - OBSOLETE" : 0
		4194304 : "Random male head" : 0
		8388608 : "Random female head" : 0
		16777216 : "Use RenderBox in ActBusies" : 0
		33554432 : "Citizen on moving brush( e.g. a train )" : 0
	]

	additionalequipment(choices) : "Weapons" : "0" =
	[
		"weapon_smg1" : "SMG1"
		"weapon_ar2" : "AR2"
		"weapon_stunstick" : "Stun Stick"
		"weapon_crowbar" : "Crow Bar"
		"weapon_shotgun" : "Shotgun"
		"weapon_rpg" : "RPG"
		"0"  : "Nothing"
	]

	ammosupply(choices) : "Ammo to Resupply (if spawnflag set)" : "SMG1" =
	[
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"SMG1_Grenade" : "SMG1 Grenade"
		"AR2" : "AR2"
		"Buckshot" : "Shotgun"
		"RPG_Round" : "RPG"
		"Grenade" : "Grenade"
		"XBowBolt" : "Crossbow Bolt"
	]
	ammoamount(integer) : "Amount of ammo to give" : 1

	citizentype(choices) : "Type" : "Default" =
	[
		0 : "Default"	 
		1 : "Downtrodden"
		2 : "Refugee"
		3 : "Rebel"
		4 : "Unique"
	]

	expressiontype(choices) : "Expression Type" : "Random" =
	[
		0 : "Random"
		1 : "Scared"
		2 : "Normal"
		3 : "Angry"
	]

	//!!!BUGBUG - don't ship with these names
	//!!!FIXME - don't ship with these names
	//!!!TODO - don't ship with these names
	model(choices) : "Model" : "models/humans/group01/male_01.mdl" =
	[
		"models/humans/group01/male_01.mdl" : "Male 1"
		"models/humans/group01/male_02.mdl" : "Male 2"
		"models/humans/group01/male_03.mdl" : "Male 3"
		"models/humans/group01/male_04.mdl" : "Male 4"
		"models/humans/group01/male_05.mdl" : "Male 5"
		"models/humans/group01/male_06.mdl" : "Male 6"
		"models/humans/group01/male_07.mdl" : "Male 7"
		"models/humans/group01/male_08.mdl" : "Male 8"
		"models/humans/group01/male_09.mdl" : "Male 9"
		"models/humans/group01/female_01.mdl" : "Female 1"
		"models/humans/group01/female_02.mdl" : "Female 2"
		"models/humans/group01/female_03.mdl" : "Female 3"
		"models/humans/group01/female_04.mdl" : "Female 4"
		"models/humans/group01/female_06.mdl" : "Female 5"
		"models/humans/group01/female_07.mdl" : "Female 6"
		"models/humans/male_cheaple.mdl" : "Cheaple Male 1"
		"models/odessa.mdl" : "Odessa. DO NOT USE."
	]
	skin(choices) : "Skin (only for Worker type)" : 0 = 
	[
		0 : "Borealis Worker"
		1 : "Factory Worker" 
	]

	ExpressionOverride(string) : "Facial expression override"

	notifynavfailblocked(choices) : "Fire output when Nav is blocked?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	neverleaveplayersquad(choices) : "Permanent squad member?" : 0 : "A permanent squad member cannot leave the player's squad unless killed or explicity removed by entity I/O. Only use this if you're sure you want to override the default AI." =
	[
		0 : "No. This is default behavior."
		1 : "Yes, stay in squad until death."
	]

	denycommandconcept(string) : "Deny command speech concept" : "" : "If you want your citizens to squad with the player but not obey commands the player gives to move the squad, put a concept here and this citizen will speak the concept instead of obeying the order."

    //Inputs
	input RemoveFromPlayerSquad(void) : "Remove from player squad, instantly."
	input SetExpressionOverride(string) : "Set facial expression override"

	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input SetCommandable(void) : "Make a previously uncommandable citizen commandable"
	input SetMedicOn(void) : "Set the medic flag on. Will not change the model or skin of the citizen."
	input SetMedicOff(void) : "Set the medic flag off. Will not change the model or skin of the citizen."
	input SetAmmoResupplierOn(void) : "Set the ammo-resupplier flag on. Will not change the model or skin of the citizen."
	input SetAmmoResupplierOff(void) : "Set the ammo-resupplier flag off. Will not change the model or skin of the citizen."
	input DispatchResponse(string) : "Valve forgot to add all citizen inputs. Here's just one of them!"
	input SpeakIdleResponse(void) : "Valve forgot to add all citizen inputs. Here's just one of them!"

	// Outputs
	output OnJoinedPlayerSquad(void) : "Fires when joins player squad"
	output OnLeftPlayerSquad(void) : "Fires when leaves player squad"
	output OnFollowOrder(void) : "Fires when ordered to follow player"
	output OnStationOrder(void) : "Fires when ordered to a location by player"
	output OnPlayerUse(void) : "Fires when a player +USEs the citizen"
	output OnNavFailBlocked(void) : "Fires when this Citizen's movement fails because he/she is blocked."
]

@NPCClass base(TalkNPC, BaseNPC, PlayerCompanion) studio() = npc_barney : "Barney"
[
	model(studio) : "World model" : "models/2003/barney.mdl"
	additionalequipment(choices) : "Weapons" : "weapon_pistol_old" =
	[
		"weapon_pistol_old" : "Pistol (2003)"
		"weapon_pistol" : "Pistol"
		"weapon_smg1" : "SMG1"
		"weapon_stunstick" : "Stun Stick"
		"weapon_shotgun" : "Shotgun"
		"weapon_ar2" : "AR2"
		"0" : "Nothing"
	]

	ExpressionOverride(string) : "Facial expression override"
	input SetExpressionOverride(string) : "Set facial expression override"

	// Outputs
	output OnPlayerUse(void) : "Fires when a player +USEs Barney"
]

@BaseClass base(BaseNPC, RappelNPC) = BaseCombine
[
	additionalequipment(choices) : "Weapons" : "weapon_smg1" =
	[
		"weapon_ar2" : 			"AR2"
		"weapon_ar2_old" : 		"AR2 (2003)"
		"weapon_shotgun" : 		"Shotgun"
		"weapon_shotgun_old" : 	"Shotgun (2003)"
		"weapon_smg1" : 		"SMG1"
		"weapon_smg1_old" : 	"SMG1 (2003)"
		"0" : 					"Nothing"
	]

	spawnflags(Flags) = 
	[
		65536 :  "Don't look for enemies that evaded me and my squad" : 0
		131072	: "Don't drop grenades" : 0
		262144  : "Don't drop ar2 alt fire (elite only) " : 0
	]

	NumGrenades(choices) : "Number of Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	// Inputs
	input LookOn(void) : "With look on, this Combine unit will try and look for enemies after they evaded him (using enemy memory data)"	
	input LookOff(void) : "With look off, this Combine unit will be asking his squadmates for enemy memory data. If they don't know where the enemy is either, the enemy is considered to have evaded them, and they stop searching."
	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input ThrowGrenadeAtTarget(target_destination) : "Throw a grenade at the specified target."
]




@PointClass base(Parentname, BaseNPC) studio("models/junk/w_traffcone.mdl") = npc_launcher : "Launcher"
[

	spawnflags(Flags) = 
	[
		65536  :  "Check LOS" : 1
	]

	StartOn(choices) : "Start On" : 0 = 
	[
		0: "Off"
		1: "On"
	] 
	MissileModel(studio) : "Missile Model" : "models/Weapons/wscanner_grenade.mdl"
	LaunchSound(sound) : "Launch Sound" : "npc/waste_scanner/grenade_fire.wav"
	FlySound(sound) :	"Fly Sound": "ambient/objects/machine2.wav"

	SmokeTrail(choices) : "Smoke Trail" : 1 = 
	[
		0: "Off"
		1: "On"
		2: "On Homing"
	] 
	LaunchSmoke(choices) : "Launch Smoke" : 1 = 
	[
		0: "Off"
		1: "On"
	] 
	LaunchDelay(integer) : "Launch Delay" : 8	    : "When ON, how long to wait between each launch"
	LaunchSpeed(string) : "Launch Speed" : 200   : "Initial launch speed of missile (in up direction)"
	PathCornerName(target_destination) : "Path Corner Name" : "" : "Name of a path corner.  If set launches a pathfollowing missing, rather than a homing missile"
	HomingSpeed(string) : "Homing Speed" : 0	    : "Speed to reach when homing"
	HomingStrength(integer) : "Homing Strength" : 10    : "How strong in homing effect (0-100)"
	HomingDelay(string) : "Homing Delay" : 0 : "Number of seconds to delay before homing starts"
	HomingRampUp(string) : "Homing Ramp Up" : "0.5" : "Number of seconds it takes to reach full homing strength after homing delay"
	HomingDuration(string) : "Homing Duration" : 5     : "Number of seconds the homing effect lasts"
	HomingRampDown(string) : "Homing Ramp Down" : "1.0" : "Number of seconds it takes homing effect to decay after homing duration"
	Gravity(string) : "Gravity" : "1.0" : "Scale for effect of gravity. (1.0 = normal gravity)"
	MinRange(integer) : "Min Range" : 100   : "Minimun distance a target can be to be attacked"
	MaxRange(integer) : "Max Range" : 2048  : "Maximum distance a target can be to be attacked"
	SpinMagnitude(string) : "Spin Magnitude" : 0	    : "Strength of spin in missile trajectory"
	SpinSpeed(string) : "Spin Speed" : 0     : "How fast does the spin rotate through 360"
	Damage(string) : "Damage" : 50    : "How much damage does each missile do"
	DamageRadius(string) : "DamageRadius" : 200   : "How far away from impact does the missle do damage"

	// Outputs
	output OnLaunch(void) : "Fires when missile is launched"

	// Inputs
	input TurnOn(void) : "Turn on Launcher"
	input TurnOff(void) : "Turn off Launcher"
	input LOSCheckOn(void) : "Start checking line of sight before firing"
	input LOSCheckOff(void) : "Stop checking line of sight before firing"
	input SetEnemyEntity(string) : "Set entity I should attack. Ignores visibility. (output from other entity only)"
	input ClearEnemyEntity(void) : "Clear set enemy enemy"
	input FireOnce(void) : "Fire Once (if have enemy)"
]


@NPCClass base(BaseNPC) studio("models/hunter.mdl") = npc_hunter :
	"A smaller, faster, strider that can pursue the player into buildings."
[
	FollowTarget(target_destination) : "Strider to Follow" : "" : "The name of the strider that this hunter should follow."
	
    // Inputs
    input FollowStrider(target_destination) : "Sets the name of the strider that this hunter should follow."
    
	input SetMinigunTime(float) : "Time to shoot at any set minigun target."
	input SetMinigunTarget(string) : "Hunter will shoot minigun at the named target."

	input DisableShooting(void) : "Forces the hunter to be melee-only."
	input EnableShooting(void) : "Allows the hunter to use range attacks or melee attacks."

	input DisableSquadShootDelay(void) : "Disables the delay between range attacks for squads of hunters, allowing them to shoot as frequently as they wish."
	input EnableSquadShootDelay(void) : "Enables the delay between range attacks for squads of hunters."
	
	input EnableUnplantedShooting(void) : "Used mainly for scripted attacks against bullseyes. Enables the hunter to shoot without having to plant first."
	input DisableUnplantedShooting(void) : "Returns the hunter to normal after a call to EnableUnplantedShooting."

	input DoPhysicsBlast(void) : "Hunter will instantly do the defensive physics blast."

	input Crouch(void) : "Crouch down."
	input Stand(void) : "Stand up from crouch."
	input DisableCrouchWalk(void) : "UNUSED: Prevents the hunter from crouch walking."
	input EnableCrouchWalk(void) : "UNUSED: Allows the hunter to crouch walk."

	input UseSiegeTargets(string) : "Pass in the name of info_targets to shoot at when I can't shoot at the player."
]


@PointClass base(npc_template_maker) iconsprite("editor/npc_maker.vmt") = npc_hunter_maker : 
	"An entity that creates hunters. The NPCs it creates are clones of a template NPC."
[
]


@NPCClass base(BaseNPC) studio() = npc_advisor :
	"An adorable sluglike alien with benevolent psychic powers."
[
	model(studio) : "World model" : "advisor.mdl"
	skin(integer) : "Skin" : 0 : "Model skin"
	
	levitationminmass(float) : "Min Mass For Throwing" : "10" : "Objects lighter than this will not be considered for throwing behavior"
	
	levitationmaxmass(float) : "Max Mass For Throwing" : "200" : "Objects lighter than this will not be considered for throwing behavior"
	
	levitationarea(string) : "Levitation Area" : "" : "Trigger volume inside which levitated objects reside"
	
	levitategoal_bottom(target_destination) : "Levitation Goal Bottom" : "" : "Objects will levitate at least this high"
	levitategoal_top(target_destination)    : "Levitation Goal Top" : "" : "Objects will levitate at least this high"
	
	staging_ent_names(string) : "Staging Position Names"  : "" : "All entities with this name will be considered staging positions for the throw behavior."
	priority_grab_name(string) : "Priority Name For Grabbing" : "" : "If any entities named this are present, the advisor will preferentially pick them up for throwing at the player."
	


	output OnPickingThrowable(void) : "Fires just before I pick something to hurl"
	output OnThrowWarn(void)        : "Fires when I trigger the warning green glow before tossing"
	output OnThrow(void)            : "Fires just after I throw something"
	output OnHealthIsNow(integer)       : "When I am damaged, my hitpoints thereafter"
	
	input SetThrowRate(float) : "Advisor will throw an object once per this many seconds (plus a little more)"
	input WrenchImmediate(string) : "Advisor will immediately start levitating all objects with this name"
	input SetStagingNum(integer): "Advisor will stage this many objects at once, then barrage the player."
	input PinPlayer(string) : "Advisor will wrench the player to this point in the air. Use a null param to let go."
	input BeamOn(string) : "Start a psychic-TK effect beam from the advisor to the specified object. You must remember to turn it off later."
	input BeamOff(string) : "Turn off a psychic-TK effect beam from the advisor to the specified object."
	
	input ELightOn(void) : "Turn on an entity light at my location. Please remember to turn this off."
	input ELightOff(void) : "Turn off my entity light."
	
	input DoNothing(void) : ""
]


@PointClass base(Targetname, Parentname, EnableDisable) = env_sporeexplosion : "Bugbait Spore Effect"
[
	spawnrate(float) : "Spawn Rate (as percentage)" : "25" : "How dense the spore effect is"
]

@PointClass base(Targetname, Parentname, Targetname, EnableDisable) = env_gunfire : "Gunfire Effect"
[
	target(target_destination) : "Target" : "" : "Shoot at this target. REMEMBER - this is an effect only! It does not do damage!"

	minburstsize(integer) : "Min Burst Size" : 2 : "Minimum number of rounds in a burst."
	maxburstsize(integer) : "Max Burst Size" : 7 : "Maximum number of rounds in a burst."

	minburstdelay(float) : "Min Delay Between Bursts" : 2 : "Minimum delay between bursts. (seconds)"
	maxburstdelay(float) : "Max Delay Between Bursts" : 5 : "Maximum delay between bursts. (seconds)"

	rateoffire(float) : "Rate of fire" : 10 : "Expressed as rounds per second"

	spread(choices) : "Bullet spread" : 5 : "The 'cone of inaccuracy' of the shots fired by this entity." =
	[
		1 : "1 Degree"
		5 : "5 Degrees"
		10 : "10 Degrees"
		15 : "15 Degrees"
	]

	bias(choices) : "Bullet distribution should be..." : 1 : "How to distribute bullets within the spread. Even distribution is a true scatter throughout the spread. Biased towards the outside makes the shots 'miss' the target by tending towards the outside of the spread." =
	[
		1 : "Evenly distributed"
		-1 : "Biased towards the outside"
	]

	collisions(choices) : "Collision detection" : 0 : "Whether/how to handle bullet collision detection. NOTE: If you select NONE, this entity will be very cheap to use, but all bullets will stop short at their target's position in space and there will be no impact effects. Normal collision detection does the same things NPCs do when they fire their guns (except harm anything)." =
	[
		0 : "None. Cheap for performance."
		1 : "Normal collision detection."
	]

	shootsound(choices) : "Shoot Sound" : "Weapon_AR2.NPC_Single" : "Gunfire sound to make" = 
	[
		"Weapon_AR2.NPC_Single" : "AR2"
		"Weapon_SMG1.NPC_Single" : "SMG1"
	]

	tracertype(choices) : "Tracer" : "AR2TRACER" : "Type of tracer to display" = 
	[
		"Tracer" : "Default"
		"AR2TRACER" : "AR2"
	]
]

@PointClass base(Parentname,Angles,Targetname) sphere(DamageRadius) studio("models/props_combine/headcrabcannister01b.mdl") = env_headcrabcanister : "Headcrab canister"
[
	spawnflags(Flags) = 
	[
		1 :  "No Impact Sound" : 0
		2 :  "No Launch Sound" : 0
		4096 : "Start Impacted" : 0
		8192 : "Land at initial position" : 0
		16384 : "Wait for input to open" : 0
		32768 : "Wait for input to spawn headcrabs" : 0
		65536 : "No smoke" : 0
		131072 : "No shake" : 0
		262144 : "Remove on impact" : 0
		524288 : "No impact effects" : 0
	]
	HeadcrabType(choices) : "Which headcrab to spawn?" : 0 =
	[
		0 : "Normal headcrabs"
		1 : "Fast Headcrabs"
		2 : "Poison Headcrabs"
	]
	HeadcrabCount(integer) : "Headcrab count" : 6 : "Number of headcrabs to spawn on impact"
	FlightSpeed(float) : "Flight Speed" : 3000  : "Speed to fly through the air"
	FlightTime(float) : "Flight Time" : 5	    : "Time to fly through the air in seconds"
	StartingHeight(float) : "Starting Height" : 0 : "Relative height from the landing position at which the canister should be launched. Positive values mean launch it above the impact point, negative values mean launch it below."
	MinSkyboxRefireTime(float) : "Min Refire Time" : 0 : "Min number of seconds before the cannister is refired. This will only work for cannisters placed in the skybox."
	MaxSkyboxRefireTime(float) : "Max Refire Time" : 0 : "Max number of seconds before the cannister is refired. This will only work for cannisters placed in the skybox."
	SkyboxCannisterCount(integer) : "Cannister count" : 1 : "Number of cannisters to fire in the skybox (0 means fire continuously, forever)."
	Damage(float) : "Impact damage" : 150 : "Max damage the canister applies on impact"
	DamageRadius(float) : "Impact damage radius": 750 : "Max radius of the impact damage for the canister"
	SmokeLifetime(float) : "Smoke Duration" : 30 : "Duration that the canister smokes.  -1 means always smoke."
	LaunchPositionName(target_destination) : "Launch Position Name" : "" : "If the canister should launch to it's origin from another point within the world, this should specify an info_target at the launch origin."

	// Inputs
	input FireCanister(void) : "Fire the canister"
	input OpenCanister(void) : "Opens the canister (must be called after the OnImpacted output is fired)"
	input SpawnHeadcrabs(void) : "Spawns headcrabs (must be called after the OnImpacted output is fired and after OpenCanister is triggered, if the Wait for Input to open spawnflag is checked.)"
	input StopSmoke(void) : "Stops the smoke if it's on"

	// Outputs
	output OnLaunched(string) : "Fired when the canister is launched"
	output OnImpacted(void) : "Fires when canister hits the ground"
	output OnOpened(void) : "Fires when canister has finished opening"
]

@NPCClass base(BaseNPC, TalkNPC, PlayerCompanion) studio() = npc_vortigaunt : "Vortigaunt"
[
	model(studio) : "World model" : "models/2003/vortigaunt.mdl"

	ArmorRechargeEnabled(choices) : "Allow Armor Recharging" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	HealthRegenerateEnabled(choices) : "Regenerate Health" : 0 : "Whether or not the vortigaunt will recover his own health over time like vital allies, while in combat" =
	[
		0 : "No"
		1 : "Yes"
	]

	CanFollowPlayer(choices) : "Can Accept Follow Requests" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Inputs
	input EnableArmorRecharge(void) : "Allow armor recharging on players"
	input DisableArmorRecharge(void) : "Do not allow armor recharging on players"
	input ExtractBugbait(string) : "Causes the vortigaunt to extract bugbait from the named target passed in."
	input ChargeTarget(string) : "Force the vortigaunt to charge the named target."
	input EnableHealthRegeneration(void) : "Allow the vortigaunt to start regenerating his health over time, like vital allies."
	input DisableHealthRegeneration(void) : "Stop the vortigaunt from regenerating his health. (Default behavior)"
	input TurnBlue(bool) : "If true, turn blue. If false, turn green. (Episodic)."
	input TurnBlack(bool) : "If true, turn black. If false, be seen. (Episodic)."
	input BeginCarryNPC(void) : "Begin to override our animations for 'carrying' an NPC. (Episodic)"
	input EndCarryNPC(void) : "Stop overriding our animations for 'carrying' an NPC. (Episodic)"

	// Outputs
	output OnFinishedExtractingBugbait(void) : "Fires when the vortigaunt's finished extracting bugbait from a target."
	output OnFinishedExtractingTauCannon(void) : "Fires when the vortigaunt's finished extracting the tau cannon from the jeep."
	output OnFinishedChargingTarget(void) : "Fires when the vortigaunt has finished charging a target."
	output OnPlayerUse(void) : "Fires when a player +USEs the vortigaunt."
]

@NPCClass base(BaseNPC) = npc_spotlight : "Spotlight"
[
	spawnflags(Flags) = 
	[
		65536  :  "Start Track On" : 1
		131072 :  "Start Light On" : 1
		262144 :  "No Dynamic Light" : 0
		524288 :  "Never Move" : 0
	]

	health(Integer) : "Health" : 100
	YawRange(integer) : "YawRange" : 90
	PitchMin(integer) : "PitchMin" : 35
	PitchMax(integer) : "PitchMax" : 50
	IdleSpeed(integer) : "IdleSpeed" : 2
	AlertSpeed(integer) : "AlertSpeed" : 5
	spotlightlength(integer) : "SpotlightLength" : 500
	spotlightwidth(integer) : "SpotlightWidth" : 50
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	
	// Inputs
	input LightOn(void) : "LightOn"
	input LightOff(void) : "LightOff"
	input TrackOn(void) : "TrackOn"
	input TrackOff(void) : "TrackOff"

	// Outputs
	output OnAlert(void) : "Fires when the spotlight alerted by sound"
	output DetectedEnemy(string) : "Outputs enemy entity when spotlight finds and starts tracking enemy"
	output LostEnemy(string) : "Outputs enemy entity when spotlight loses enemy that it's tracking, if enemy still exists"
	output SquadDetectedEnemy(string) : "Outputs enemy entity when squad finds and starts tracking enemy"
	output SquadLostEnemy(string) : "Outputs enemy entity when squad loses enemy that it's tracking, if entity still exists"
	output LightPosition(string) : "Position of the end of the spotlight beam"
]

@NPCClass base(BaseNPC) studio() = npc_strider : "Strider"
[
	model(choices) : "Model" : "models/combine_strider.mdl" : "Standard strider" = 
	[
		"models/combine_strider.mdl" : "Standard strider"
		"models/combine_strider_vsdog.mdl" : "The Strider that fights Dog"
		"models/2003/combine_strider.mdl" : "2003 Strider"
	]

	spawnflags(Flags) = 
	[
		65536 :  "Can Stomp Player" : 0		
		131072 :  "Minimal damage taken from NPCs (1 point per missile)" : 0
	]

	//Inputs
	input SetMinigunTime(float) : "Time to shoot at any set minigun target"
	input SetMinigunTarget(string) : "Strider will shoot minigun at this"
	input DisableMinigun(void) : "Disables the minigun until further notice by the EnableMinigun input."
	input EnableMinigun(void) : "Enables the minigun if it was disabled by the DisableMinigun input."
	input SetCannonTarget(string) : "Strider will shoot cannon at this"
	input FlickRagdoll(void) : "Strider will flick anyone he's skewered"

	input StartPatrol(void) : "Start patrolling back and forth along the current track."
	input StopPatrol(void) : "Stop patrolling back and forth along the track. This will cause the helicopter to come to rest at the track which he's currently flying toward."
	input ChooseFarthestPathPoint(void) : "When tracking an enemy, choose the point on the path furthest from the enemy, but still in firing range"
	input ChooseNearestPathPoint(void) : "When tracking an enemy, choose the point on the path nearest from the enemy"
	input Crouch(void) : "Crouch down"
	input CrouchInstantly(void) : "Crouch instantly. This makes the Strider pop to a crouch. Do not do this where players can observe."
	input Stand(void) : "Stand up from crouch"
	input DisableCrouchWalk(void)
	input EnableCrouchWalk(void)
	
	input SetTargetPath(string) : "Set a path for the strider to patrol. The strider will first move to the closest point on the path"
	input ClearTargetPath(void) : "Clear the strider patrol path"

	input EnableAggressiveBehavior(void) : "Use aggressive behavior. Fire faster, more frequently"
	input DisableAggressiveBehavior(void) : "Stop using aggressive behavior. (Revert to normal)"

	input StopShootingMinigunForSeconds(float) : "Stop shooting the minigun for a period of time (specify seconds as parameter)"

	input DisableCrouch(void) : "Prevent the Strider from crouching"
	input DisableMoveToLOS(void) : "Prevent the Strider from seeking Line of Sight to target. (Hold position)"
	
	input DisableCollisionWith(string) : "Disable collision with a given object."
	input EnableCollisionWith(string) : "Reenable collision with a given object."
	
	input ScaleGroundSpeed(float) : "Scale the movement speed of the strider"

	disablephysics(choices) : "Disable physics (reduce CPU)" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
]

@NPCClass base(BaseNPC, BaseFadeProp) studio("models/Barnacle.mdl") sphere(fademindist) sphere(fademaxdist) = npc_barnacle : "Barnacle"
[
	spawnflags(Flags) =
	[
		65536 : "Cheap death" : 0
		131072 :  "Ambush Mode"		: 0
	]

	RestDist(float) : "Rest Distance" : 16 : "Distance above the ground that the tongue should lie when the barnacle is at rest"

	input DropTongue(void) : "Drop tongue"
	input SetDropTongueSpeed(integer) : "Set Drop Tongue speed"
	
	input LetGo(void) : "Let go of anything I am holding."
	
	output OnGrab(string)    : "When I attach my tongue to something"
	output OnRelease(string) : "When I let go of something"
]

@NPCClass base(BaseHelicopter) studio() = npc_combinegunship : "Combine Gunship"
[
	model(studio) : "World model" : "models/gunship.mdl"
	// Inputs
	input OmniscientOn(void) : "Gunship knows target's location even when target is out of sight or behind cover"
	input OmniscientOff(void) : "Gunship relies on normal sight functions to locate target"
	input BlindfireOn(void ) : "Gunship will fire at an unseen target, attempting to punch through to them"
	input BlindfireOff(void ) : "Gunship only fires at viusible target"
	input SetPenetrationDepth( float ) : "Set penetration depth of bullets"

	input SetDockingBBox( void ) : "Shrink Bounding Box"
	input SetNormalBBox( void ) : "Set Bounding Box to normal size"

	input EnableGroundAttack( void ) : "Allow the gunship to use its ground attack"
	input DisableGroundAttack( void ) : "Don't allow the gunship to use its ground attack"
	input DoGroundAttack( string ) : "Causes the gunship to execute its ground attack"

	input BecomeInvulnerable( void ): "Stops the gunship from taking damage, but still makes sounds effects"
	input BecomeVulnerable( void ): "Makes the gunship act normally to damage"

	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"

	// Outputs
	output OnFireCannon(void)  : "Fires when the gunship fires a cannon round"
	output OnStartGroundAttack(void)  : "Fires when the gunship fires a cannon round"
	output OnFinishGroundAttack(void)  : "Fires when the gunship fires a cannon round"
	output OnFirstDamage( void ) : "Fired when the first damage is done to the gunship."
	output OnSecondDamage( void ) : "Fired when the second damage is done to the gunship."
	output OnThirdDamage( void ) : "Fired when the third damage is done to the gunship."
	output OnFourthDamage( void ) : "Fired when the fourth damage is done to the gunship."

	spawnflags(Flags) =
	[
		4096 : "No ground attack" : 0
	]
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_target_helicopter_crash : "Helicopter Crash Target"
[
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_target_gunshipcrash : "Gunship Crash Target"
[
	input Enable(void) : "Enable the crash target."
	input Disable(void) : "Disable the crash target."
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/info_target.vmt")  = info_locator_interest : "Locator Marker 1"
[
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/info_target.vmt")  = info_locator_combine : "Locator Marker 2"
[
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/info_target.vmt")  = info_locator_objective : "Locator Marker 3"
[
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@NPCClass base(BaseHelicopter, Studiomodel) studio() = npc_combinedropship : "Combine Dropship"
[
	model(studio) : "World model" : "models/combine_dropship.mdl" 
	spawnflags(Flags) =
	[
		32768 : "Wait for input before dropoff" : 0
	]

	LandTarget(target_destination) : "Land target name"
	GunRange(float) : "Crate Gun Range" : 2048 : "If the dropship's carrying a crate with a gun on it, it'll only shoot targets within this range."

	RollermineTemplate(target_destination) : "Name of Rollermine Template" : "" : "If this dropship drops any rollermines due to the 'DropMines' input being fired, it will use this template for the rollermines it creates. If left blank, ordinary rollermines will be dropped."

	NPCTemplate(target_destination) : "Name of Template NPC 1"
	NPCTemplate2(target_destination) : "Name of Template NPC 2"
	NPCTemplate3(target_destination) : "Name of Template NPC 3"
	NPCTemplate4(target_destination) : "Name of Template NPC 4"
	NPCTemplate5(target_destination) : "Name of Template NPC 5"
	NPCTemplate6(target_destination) : "Name of Template NPC 6"

	Dustoff1(target_destination) : "Name of dustoff point for NPC 1"
	Dustoff2(target_destination) : "Name of dustoff point for NPC 2"
	Dustoff3(target_destination) : "Name of dustoff point for NPC 3"
	Dustoff4(target_destination) : "Name of dustoff point for NPC 4"
	Dustoff5(target_destination) : "Name of dustoff point for NPC 5"
	Dustoff6(target_destination) : "Name of dustoff point for NPC 6"

	APCVehicleName(target_destination) : "Name of the APC or Crab Synth to drop"
	Invulnerable(Choices) : "Invulnerable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	rappeldeploy(Choices) : "Deploy troops by rappeling" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	CrateType(Choices) : "Crate Type" : 2 =
	[
		-4 : "Crab Synth"
		-3 : "Jeep"
		-2 : "APC"
		-1 : "Strider"
		0 : "Roller Hopper"
		1 : "Soldier Crate"
		2 : "None"
	]

	// Inputs
	input LandLeaveCrate(integer) : "Land, drop soldiers, and leave the crate behind. Specify the number of troops to drop off in the parameter."
	input LandTakeCrate(integer) : "Land, drop soldiers, but don't leave the crate behind. Specify the number of troops to drop off in the parameter."
	input DropMines(integer) : "Drop Rollermines. Specify the number of mines to drop in the parameter."
	input DropStrider(void) : "Drop the Strider you're carrying. Now."
	input DropCurrentCarriedObject(void) : "Drop whatever object is being carried (use after telling dropship to Pickup something)"
	input DropAPC(void) : "Drop the APC you're carrying. Now."
	input DropCrabSynth(void) : "Drop the Crab Synth you're carrying. Now."
	input Hover(target_destination) : "Hover over a named target entity until told to fly to a path."
	input Pickup(string) : "Pickup an entity."
	input SetLandTarget(string) : "Set my land target name."
	input SetGunRange(float) : "Set my crate gun's range."

	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"

	input StopWaitingForDropoff(void) : "Stop waiting for the dropoff. Dropoff as soon as possible."


	// Outputs
	output OnFinishedDropoff(void)  : "Fires when the dropship has finished a dropoff."
	output OnFinishedPickup(void) : "Fires when the dropship has finished a pickup."
	output OnLiftoff(void) : "Fires when the dropship unloaded all troops and prepares to liftoff."

	output OnCrateShotDownBeforeDropoff(float) : "Fires when the container was shot down before it dropped off soldiers. The parameter contains the number of soldiers that weren't successfully dropped off."
	output OnCrateShotDownAfterDropoff(void) : "Fires when the container was shot down after it dropped off soldiers."

]

@NPCClass base(BaseHelicopter) studio() = npc_helicopter : "Helicopter"
[
	model(studio) : "World model" : "models/combine_helicopter.mdl"
	
	gunammo(choices) : "Which ammo does the gun use" : "HelicopterGun" =
	[
		"HelicopterGun" : "(Retail) Special Helicopter ammo"
		"MediumRound" : "(2003) AR2 ammo"
	]
	
	spawnflags(Flags) = 
	[
		65536 :  "Loud rotor wash sound" : 0
		131072 : "Electrical drone" : 0
		262144 : "Helicopter lights" : 0
		524288 : "Ignore avoid spheres+boxes" : 0
		1048576 : "More aggressive attacks" : 0
		2097152 : "Cast long shadow" : 0
	]

	InitialSpeed(string) : "Initial Speed" : "0"
	GracePeriod(float) : "Grace Period" : "2.0" : "Time in seconds the helicopter has to see the player before he starts shooting"
	PatrolSpeed(float) : "Patrol Speed" : "0" : "Speed at which the helicopter moves if he has no enemy."

	noncombat(choices) : "Non-combat (Do not precache gibs)" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input GunOn(void) : "GunOn"
	input GunOff(void) : "GunOff"
	input MissileOn(void) : "MissileOn"
	input MissileOff(void) : "MissileOff"
	input EnableRotorWash(void) : "Turns on rotor wash effects"
	input DisableRotorWash(void) : "Turns off rotor wash effects"
	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"
	input StartBombingVehicle(void) : "Starts the chopper leading enemy vehicles and dropping bombs on them."
	input StartTrailingVehicle(void) : "Starts the chopper trailing enemy vehicles and shooting at them."
	input StartDefaultBehavior(void) : "Starts the chopper in the mode where he always stops at nav points instead of stopping anywhere in between nav points."
	input StartAlwaysLeadingVehicle(void) : "Starts the chopper *always* leading enemy vehicles (regardless of how they are moving w/respect to the path) and dropping bombs on them. This mode is different from StartBombingVehicle in that it never uses the machine gun."
	input StartSprinkleBehavior(void) : "Starts the chopper dropping bombs randomly + shooting at the player."
	input StartBullrushBehavior(void) : "Starts the chopper bullrushing the player."
	input SetHealthFraction(float) : "Sets the chopper health as a percentage of max health"

	input EnableDeadlyShooting(void) : "Starts the chopper being deadly to on-foot players"
	input DisableDeadlyShooting(void) : "Stops the chopper being deadly to on-foot players"

	input StartNormalShooting(void) : "The chopper will fire in short bursts. Good for on-foot experiences"
	input StartLongCycleShooting(void) : "The chopper fires in long bursts"
	input StartContinuousShooting(void) : "The chopper fires continuously."
	input StartFastShooting(void) : "The chopper fires normal bursts, but does not 'charge up' the gun. Fires immediately."

	input ResetIdleTime(void) : "Allows the helicopter to fire immediately if he's not in the middle of charging or firing"
	input SetAngles(string) : "Instantly snaps the orientation of the helicopter (Pitch Yaw Roll)"
	input DropBomb(void) : "Immediately drops a bomb based on normal bomb dropping rules"
	input DropBombStraightDown(void) : "Immediately drops a bomb directly downwards"
	input DropBombAtTarget(target_destination) : "Immediately drops a bomb directly at the target destination, but only if the player isn't right there"
	input DropBombAtTargetAlways(target_destination) : "Immediately drops a bomb directly at the target destination, no matter whether it's fair or not."
	input DropBombDelay(float) : "Add a delay before the next bomb is dropped"
	input BecomeIndestructible(void) : "Makes the helicopter take no more damage"

	input DisablePathVisibilityTests(void) : "When the helicopter moves, he will not check for visibility from the path_track to the enemy to cull out path_tracks"
	input EnablePathVisibilityTests(void) : "When the helicopter moves, he will only move to path_tracks that have line-of-sight to the enemy"

	input StartCarpetBombing(void) : "Starts the helicopter constantly dropping megabombs until StopCarpetBombing input"
	input StopCarpetBombing(void) : "Stop the carpet bombing behavior"

	// Outputs
	output OnHealthChanged(integer) : "Fires when the helicopter health changes. The integer is the percentage of health the chopper has from 0-100."
	output OnShotDown(void) : "Fires the instant the helicopter is killed"
]

@NPCClass base(BaseHelicopter) studio() = npc_helicopter_old : "2003 Helicopter"
[
	model(studio) : "World model" : "models/2003/attack_helicopter.mdl"
	
	gunammo(choices) : "Which ammo does the gun use" : "MediumRound" =
	[
		"HelicopterGun" : "(Retail) Special Helicopter ammo"
		"MediumRound" : "(2003) AR2 ammo"
	]
	
	spawnflags(Flags) = 
	[
		65536 :  "Loud rotor wash sound" : 0
		131072 : "Electrical drone" : 0
		262144 : "Helicopter lights" : 0
		524288 : "Ignore avoid spheres+boxes" : 0
		1048576 : "More aggressive attacks" : 0
		2097152 : "Cast long shadow" : 0
	]

	InitialSpeed(string) : "Initial Speed" : "0"
	GracePeriod(float) : "Grace Period" : "2.0" : "Time in seconds the helicopter has to see the player before he starts shooting"
	PatrolSpeed(float) : "Patrol Speed" : "0" : "Speed at which the helicopter moves if he has no enemy."

	noncombat(choices) : "Non-combat (Do not precache gibs)" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input GunOn(void) : "GunOn"
	input GunOff(void) : "GunOff"
	input MissileOn(void) : "MissileOn"
	input MissileOff(void) : "MissileOff"
	input EnableRotorWash(void) : "Turns on rotor wash effects"
	input DisableRotorWash(void) : "Turns off rotor wash effects"
	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"
	input StartBombingVehicle(void) : "Starts the chopper leading enemy vehicles and dropping bombs on them."
	input StartTrailingVehicle(void) : "Starts the chopper trailing enemy vehicles and shooting at them."
	input StartDefaultBehavior(void) : "Starts the chopper in the mode where he always stops at nav points instead of stopping anywhere in between nav points."
	input StartAlwaysLeadingVehicle(void) : "Starts the chopper *always* leading enemy vehicles (regardless of how they are moving w/respect to the path) and dropping bombs on them. This mode is different from StartBombingVehicle in that it never uses the machine gun."
	input StartSprinkleBehavior(void) : "Starts the chopper dropping bombs randomly + shooting at the player."
	input StartBullrushBehavior(void) : "Starts the chopper bullrushing the player."
	input SetHealthFraction(float) : "Sets the chopper health as a percentage of max health"

	input EnableDeadlyShooting(void) : "Starts the chopper being deadly to on-foot players"
	input DisableDeadlyShooting(void) : "Stops the chopper being deadly to on-foot players"

	input StartNormalShooting(void) : "The chopper will fire in short bursts. Good for on-foot experiences"
	input StartLongCycleShooting(void) : "The chopper fires in long bursts"
	input StartContinuousShooting(void) : "The chopper fires continuously."
	input StartFastShooting(void) : "The chopper fires normal bursts, but does not 'charge up' the gun. Fires immediately."

	input ResetIdleTime(void) : "Allows the helicopter to fire immediately if he's not in the middle of charging or firing"
	input SetAngles(string) : "Instantly snaps the orientation of the helicopter (Pitch Yaw Roll)"
	input DropBomb(void) : "Immediately drops a bomb based on normal bomb dropping rules"
	input DropBombStraightDown(void) : "Immediately drops a bomb directly downwards"
	input DropBombAtTarget(target_destination) : "Immediately drops a bomb directly at the target destination, but only if the player isn't right there"
	input DropBombAtTargetAlways(target_destination) : "Immediately drops a bomb directly at the target destination, no matter whether it's fair or not."
	input DropBombDelay(float) : "Add a delay before the next bomb is dropped"
	input BecomeIndestructible(void) : "Makes the helicopter take no more damage"

	input DisablePathVisibilityTests(void) : "When the helicopter moves, he will not check for visibility from the path_track to the enemy to cull out path_tracks"
	input EnablePathVisibilityTests(void) : "When the helicopter moves, he will only move to path_tracks that have line-of-sight to the enemy"

	input StartCarpetBombing(void) : "Starts the helicopter constantly dropping megabombs until StopCarpetBombing input"
	input StopCarpetBombing(void) : "Stop the carpet bombing behavior"

	// Outputs
	output OnHealthChanged(integer) : "Fires when the helicopter health changes. The integer is the percentage of health the chopper has from 0-100."
	output OnShotDown(void) : "Fires the instant the helicopter is killed"
]

@PointClass base(Targetname, Parentname) studio("models/combine_helicopter/helicopter_bomb01.mdl") = grenade_helicopter : "Helicopter bomb"
[
	spawnflags(Flags) = 
	[
		65536 :  "Is a dud" : 0
	]

	// Inputs
	input ExplodeIn(float) : "Tells the bomb to explode in X seconds."
	
	// Outputs
	output OnPhysGunOnlyPickup(void) : "Fired when a player picks this object up WITH THE PHYSGUN. +USE pickups do not fire this output."
]


@PointClass base(Targetname, Parentname) iconsprite("editor/env_firesource") color(255 255 0) sphere(radius) = npc_heli_avoidsphere : "Helicopter avoidance sphere"
[
	spawnflags(Flags) = 
	[
		65536 :  "Avoid the sphere above and below" : 0
	]
	radius(float) : "Radius" : 128
]

@SolidClass base(Origin, Angles, Parentname) color(255 255 0) = npc_heli_avoidbox : "Helicopter avoidance box"
[
	spawnflags(Flags) = 
	[
		65536 :  "Avoid the box above and below" : 0
	]
]

@SolidClass base(Origin, Angles, Parentname) color(255 255 0) = npc_heli_nobomb : "Helicopter bombing suppressor"
[
]

@NPCClass base(BaseNPC) studio() = npc_fastzombie : "Fast Zombie"
[
	model(studio) : "World model" : "models/2003/Zombie/fast.mdl"
	
	input AttachToVehicle(string) : "Attach to a specified vehicle entity"
	
	input EnterSlumpMode(void) : "Forces the zombie to go slump."
	input ExitSlumpMode(void) : "Forces the zombie to exit slump."
]

@NPCClass base(BaseNPC) studio("Models/Zombie/Fast_torso.mdl") = npc_fastzombie_torso : "Fast Zombie Torso"
[

]

@NPCClass base(BaseNPC) studio() = npc_zombie : "Zombie"
[
	model(studio) : "World model" : "models/2003/Zombie/classic.mdl"
	torsomodel(studio) : "Torso model" : "models/2003/Zombie/classic_torso.mdl"
	legsmodel(studio) : "Legs model" : "models/2003/Zombie/classic_legs.mdl"	
]

@NPCClass base(BaseNPC) studio() = npc_zombie_torso : "Zombie Torso"
[
	model(studio) : "World model" : "models/2003/Zombie/classic_torso.mdl"
]

@NPCClass base(BaseNPC) studio("models/Zombie/zombie_soldier.mdl") = npc_zombine : "Combine Soldier Zombie"
[
	input StartSprint(void) : "Forces the zombine to sprint."
	input PullGrenade(void) : "Forces the zombine to pull a grenade."
	
]
@NPCClass base(BaseNPC) studio() = npc_poisonzombie :
	"A bloated, disgusting, fluid-spurting zombie created by a poison headcrab."
[
	model(studio) : "World model" : "models/2003/Zombie/poison.mdl"
	crabcount(choices) : "Crabs in nest" : 3 =
	[
		1 : "1 Crab"
		2 : "2 Crabs"
		3 : "3 Crabs"
	]
	
	input EnterSlumpMode(void) : "Forces the zombie to go slump."
	input ExitSlumpMode(void) : "Forces the zombie to exit slump."
]

@NPCClass base(BaseNPC) studio() = npc_cscanner : "City Scanner"
[
	model(studio) : "World model" : "models/2003/combot.mdl"
	behavior(choices) : "Behavior" : 1 : "Which gameplay behavior this should have" =
	[
		0 : "Retail"
		1 : "2003"
	]
	spawnflags(Flags) = 
	[
		65536 :  "No Dynamic Light" : 0
		131072: "Strider Scout Scanner" : 0
	]
	
		
	skin(integer) : "Skin" : 0 : "Model skin"
	spotlightlength(integer) : "Spotlight Length" : 500
	spotlightwidth(integer) : "Spotlight Width" : 50
	
	spotlightdisabled(choices) : "Spotlight Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spotlightnodlight(choices) : "No Dynamic Lights" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	ShouldInspect(choices) : "Should inspect" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	OnlyInspectPlayers(choices) : "Only Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	NeverInspectPlayers(choices) : "Never Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	// Inputs
	input DisableSpotlight(void) : "DisableSpotlight"
	input InspectTargetPhoto(string) : "Tells the scanner to photograph the given entity, named by classname or by target name. !activator or !player works here also."
	input InspectTargetSpotlight(string) : "Tells the scanner to spotlight the given entity, named by classname or by target name. !activator or !player works here also."
	input InputSetFlightSpeed(integer) : "Sets the flight speed of the scanner"
	input InputShouldInspect(integer) : "Set whether should inspect or not"
	input SetFollowTarget(string) : "Set target to follow until told otherwise"
	input ClearFollowTarget(void) : "Stop following our target"
	input SetDistanceOverride(float) : "Override the distance the scanner will attempt to keep between inspection targets and itself"

	input DeployMine(void) : "Drop landmine (if carrying one)"
	input EquipMine(void) : "Equip with landmine"
	
	// Outputs
	output OnPhotographPlayer(void) : "Fired any time the scanner takes a picture of the player."
	output OnPhotographNPC(void) : "Fired any time the scanner takes a picture of an NPC."
]


@NPCClass base(BaseNPC) studio("models/shield_scanner.mdl") = npc_clawscanner : "Claw Scanner"
[
	spawnflags(Flags) = 
	[
		65536 :  "No Dynamic Light" : 0
		131072: "Strider Scout Scanner" : 0
	]

		
	skin(integer) : "Skin" : 0 : "Model skin"
	spotlightlength(integer) : "Spotlight Length" : 500
	spotlightwidth(integer) : "Spotlight Width" : 50
	
	spotlightdisabled(choices) : "Spotlight Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spotlightnodlight(choices) : "No Dynamic Lights" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	ShouldInspect(choices) : "Should inspect" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	OnlyInspectPlayers(choices) : "Only Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	NeverInspectPlayers(choices) : "Never Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	// Inputs
	input DisableSpotlight(void) : "DisableSpotlight"
	input InspectTargetPhoto(string) : "Tells the scanner to photograph the given entity, named by classname or by target name. !activator or !player works here also."
	input InspectTargetSpotlight(string) : "Tells the scanner to spotlight the given entity, named by classname or by target name. !activator or !player works here also."
	input InputSetFlightSpeed(integer) : "Sets the flight speed of the scanner"
	input InputShouldInspect(integer) : "Set whether should inspect or not"
	input SetFollowTarget(string) : "Set target to follow until told otherwise"
	input ClearFollowTarget(void) : "Stop following our target"
	input SetDistanceOverride(float) : "Override the distance the scanner will attempt to keep between inspection targets and itself"

	input DeployMine(void) : "Drop landmine (if carrying one)"
	input EquipMine(void) : "Equip with landmine"
	
	// Outputs
	output OnPhotographPlayer(void) : "Fired any time the scanner takes a picture of the player."
	output OnPhotographNPC(void) : "Fired any time the scanner takes a picture of an NPC."
]

@NPCClass base(BaseNPC,AlyxInteractable) studio("models/manhack.mdl") = npc_manhack : "Manhack"
[
	spawnflags(Flags) = 
	[
		65536 : "Start packed up (folded and engine off)" : 0
		131072 : "Don't use any damage effects" : 0
		262144 : "Use Air Nodes" : 0
		1048576 : "No Danger Sounds" : 0
		2097152 : "Virtual version" : 0
	]

	input DisableSwarm(void) : "Disable the manhack swarm behavior."
	input Unpack(void) : "Causes the manhack to stop being packed up."
	ignoreclipbrushes(choices): "Ignore NPC Clip brushes" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]
]


@NPCClass base(BaseNPC) studio("models/mortarsynth.mdl") = npc_mortarsynth : "Mortar Synth"
[
]


@NPCClass base(BaseNPC,RappelNPC) studio("models/police.mdl") = npc_metropolice : "MetroPolice"
[
	additionalequipment(choices) : "Weapons" : "weapon_pistol" =
	[
		"weapon_pistol" : 		"Pistol"
		"weapon_357" : 			"Revolver"
		"weapon_smg1"  : 		"SMG1"
		"weapon_stunstick"  : 	"Stun Stick"
		"weapon_shotgun"  : 	"Shotgun"
		"0"  : 					"Nothing"
	]

	manhacks(Choices) : "Number of Manhacks" : 0 =
	[
		0 : "None"
		1 : "1"
		2 : "2"
	]

	weapondrawn(Choices) : "Pistol starts drawn" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spawnflags(Flags) =
	[
		65536 : "Elite Version" : 0
		131072 : "Simple cops (health is 15 points lower)" : 0
		262144 : "Rappel (this flag does nothing!)" : 0
		524288 : "Always stitch" : 0
		1048576 : "No chatter" : 0
		2097152 : "Arrest enemies" : 0
		4194304 : "No far stitching" : 0
		8388608 : "Prevent manhack toss" : 0
		16777216: "Allowed to respond to thrown objects" : 0
		33554432: "Mid-range attacks (halfway between normal + long-range)" : 0
	]
	  
	// Inputs
	input EnableManhackToss(void) : "Enables manhack toss (which had been disabled by the spawnflag)"
	input ForceManhackToss(void) : "blah"
	input SetPoliceGoal(string) : "Causes the NPC to police the area defined by an ai_goal_police"
	input ActivateBaton(void) : "Set the baton to active"
	input ThrowSmokeGrenadeAtTarget(string) : "Forces smoke grenade throw at specified target"

	// Outputs
	output OnStunnedPlayer(void) : "Fires when the player is hit by a stunstick by this NPC."
	output OnCupCopped(void) : "Fires if the player hits me with the cupcop can. ONLY use for x360 achievement."
]

@NPCClass base(BaseNPC) studio("models/synth.mdl") = npc_crabsynth : "Crab Synth"
[
	input SetHullSizeSmall(void) : "Compress the hull size, allowing this NPC to navigate tighter spaces and ramps"
	input SetHullSizeNormal(void) : "Restore normal hull size in order to properly use melee checks and collision."
	
	input SetSalvoType_HomingVolley(void) : "This crabsynth will use a volley of homing missiles as its main attack. Fires up to X missiles with a small delay between them, they home in on the target and explode on contact. The number of missiles can be set via SetSalvoSize input."
	
	input SetSalvoType_LinedVolley(void) : "This crabsynth will use a volley of arching down missiles launched in a frontal formation. Fires X missiles simultaneously, they fly up then arch down and explode on contact with the ground. The number of missiles can be set via SetSalvoSize input."
	
	input SetSalvoType_UmbrellaVolley(void) : "This crabsynth will use a volley of arching down missiles launched in an umbrella formation. Fires X missiles simultaneously, they fly up then arch down and explode on contact with the ground. The number of missiles can be set via SetSalvoSize input. NOTE: this mode is bugged, not always forming a correct 'umbrella'. It works best with 16 missiles."
	
	input SetSalvoType_TwinMissilesDirect(void) : "This crabsynth will fire twin missiles as its main attack. The missiles fly forward (same direction the crab is facing), homing in on target slightly. Explode on contact."
	
	input SetSalvoType_TwinMissilesArched(void) : "This crabsynth will fire twin missiles as its main attack. The missiles fly up and arch down, homing in on target slightly. Explode on contact. NOTE: due to simplified programming, the missiles will follow exactly same trajectory, so it looks like it's just one missile."
	
	input SetSalvoSize(integer) : "Overrides the number of missiles the crab synth will launch in a volley (default is 5 missiles)."
	
	input SetSalvoNextFireDelay(float) : "Overrides how soon the crab synth can launch another volley after finishing the first one. Keep in mind this won't overrid the duration of the animation, so setting it to 0 won't exactly make it fire without interruption - there will be brief poses between tasks."
	
	input EnableChargeAttack(void) : "Enables melee charge attack."
	input DisableChargeAttack(void) : "Forbids melee charge attack."
	
	input EnableMinigunAttack(void) : "Enables minigun ranged attack."
	input DisableMinigunAttack(void) : "Forbids minigun ranged attack."
	
	input EnableSalvoAttack(void) : "Enables missiles range attack."
	input DisableSalvoAttack(void) : "Forbids missiles range attack."
	
	output OnFiredRockets(void) : "Fires after the crabsynth performs twin missiles attack (either type)."
	output OnStartedSalvo(void) : "Fires once the crabsynth begins its salvo attack."
	output OnFinishedSalvo(void) : "Fires once the crabsynth has fired all missiles in the salvo."
	output OnStartedMinigun(void) : "Fires once the crabsynth begins its minigun cycle (after it is done warming up minigun)."
	output OnFinishedMinigun(void) : "Fires once the crabsynth has finished its minigun cycle."
	output OnStartedCharge(void) : "Fires once the crabsynth begins its melee charge attack."
]

@NPCClass base(TalkNPC) studio() = npc_monk : "Monk"
[
	model(studio) : "World model" : "models/2003/monk.mdl"
	additionalequipment(choices) : "Weapons" : "weapon_annabelle" =
	[
		"weapon_annabelle" : "Annabelle"
		"weapon_smg1" : "SMG1"
		"weapon_ar2" : "AR2"
		"weapon_stunstick" : "Stun Stick"
		"weapon_crowbar" : "Crow Bar"
		"weapon_shotgun" : "Shotgun"
		"weapon_rpg" : "RPG"
		"0"  : "Nothing"
	]

	HasGun(choices) : "Has Gun" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input PerfectAccuracyOn(void) : "Make every shot at a zombie a headshot"
	input PerfectAccuracyOff(void) : "Return to normal accuracy"
]


@NPCClass base(TalkNPC,Parentname, PlayerCompanion) studio() = npc_alyx : "Alyx"
[
	model(studio) : "World model" : "models/2003/alyx.mdl"

	additionalequipment(choices) : "Weapons" : "weapon_alyxgun" =
	[
		"weapon_alyxgun" : "Alyx Gun"
		"weapon_shotgun" : "Shotgun"
		"0"  : "Nothing"
	]

	DontPickupWeapons(choices) : "Prevent picking up weapons?" : "1" : "If yes, this NPC will NOT be allowed to pick up weapons they find on the ground." =
	[
		0 : "No"
		1 : "Yes"	
	]

	DontGiveEMP(choices) : "Spawn Alyx without EMP (2003)" : "1" : "" =
	[
		0 : "No"
		1 : "Yes"	
	]

//	ShouldHaveEMP(choices) : "Should alyx have her EMP?" : "1" =
//	[
//		0 : "No"
//		1 : "Yes"
//	]


    // Inputs
	input AllowInteraction(void) : "Allow Alyx's 'hacking' AI to run."
	input DisallowInteraction(void) : "Disallow Alyx's 'hacking' AI."
	input AllowDarknessSpeech(bool) : "Enables or disables Alyx's darkness speech ('where are you', etc)." 
	input SetAnimLockedEntity(string) : "Sets Alyx to take her animation and cycle position from another entity."
	input ClearAnimLockedEntity(void) : "Stops Alyx from taking her animation locking from another character."
	input GiveEMP(bool): "Gives or removes the EMP tool."

    //Outputs
	output OnFinishInteractWithObject(void) : "Fires when Alyx finishes interacting with an object (usually hacking it)."
	output OnPlayerUse(void) : "Fires when a player +USEs Alyx."

	// Vehicle entry/exit input (ultimately will reside in TalkNPC)
	input EnterVehicle(string) : "Make Alyx enter the vehicle specified by name."
	input EnterVehicleImmediately(string) : "Make Alyx enter the vehicle specified by name immediately via teleportation."
	input ExitVehicle(void) : "Make Alyx exit the vehicle she's in."
	input CancelEnterVehicle(void) : "Stops Alyx from trying to enter the vehicle if she's outside of it."

	// Outputs
	output OnPlayerUse(void) : "Fires when a player +USEs Alyx"
]

@PointClass base(Targetname, EnableDisable) = ai_goal_operator : "Indicates items in the world that some NPCs may operate upon"
[
	actor(target_name_or_class) : "Actor to affect" : "" : "NPC that should perform this operation"

	target(target_destination) : "Position entity" : "" : "Name of the entity that the NPC should move to in order to perform the operation."

	contexttarget(target_destination) :"Context target" : "" : "(Optional) Name of an entity that the operator will use within context."

	state(choices) : "Initial State" : 0 = 
	[
		0 : "Not ready (closed, locked, etc)"
		1 : "Ready (open and accessible)"
	]

	moveto(choices) : "How should NPC approach?" : 1 =
	[
		0 : "DO NOT USE THIS SETTING"
		1 : "Walk"
		2 : "Run"
	]
	
	input Activate( void ) : "Begin operating on the object"
//	input Deactivate( void ) : "Cease contesting position"
	input SetStateReady(void) : "Set the object's state to READY. Fire this input when the object has been unlocked/opened or otherwise made ready for interaction."
	input SetStateFinished(void) : "Fire this input when the NPC has completed the interaction with this object."

	output OnBeginApproach(void) : "Fired when the NPC begins to approach the position"
	output OnMakeReady(void) : "Make the item ready to operate"
	output OnBeginOperating(void) : "Fired when the NPC is ready to operate"
	output OnFinished(void) : "The item is done"
]

@PointClass base(Targetname, EnableDisable) sphere(LightRadius) = info_darknessmode_lightsource
[
	LightRadius(float) : "Light Radius" : "256.0" : "The radius around this lightsource in which Alyx will be able to see enemies."
]

@NPCClass base(TalkNPC) studio() = npc_kleiner : "Kleiner"
[
	model(studio) : "World model" : "models/2003/kleiner.mdl"
]

@NPCClass base(TalkNPC,Parentname) studio() = npc_eli : "Eli Vance"
[
	model(studio) : "World model" : "models/2003/eli.mdl"
]

@NPCClass base(TalkNPC) studio() = npc_magnusson : "Magnusson"
[
	model(studio) : "World model" : "models/magnusson.mdl"
]

@NPCClass base(TalkNPC) studio() = npc_breen : "Dr Breen"
[
	model(studio) : "World model" : "models/2003/breen.mdl"

	spawnflags(Flags) = 
	[
		65536 : "Ignore speech semaphore" : 0
	]
]

@NPCClass base(TalkNPC) studio() = npc_mossman : "Dr Mossman"
[
	model(studio) : "World model" : "models/2003/mossman.mdl"
]

@NPCClass base(TalkNPC) studio() = npc_gman : "The G-Man"
[
	model(studio) : "World model" : "models/2003/gman.mdl"
]

@NPCClass base(TalkNPC) studio("models/2003/Odell.mdl") = npc_odell : "Owen Odell"
[
]

@NPCClass base(BaseNPC) studio("models/2003/dog.mdl") = npc_dog : "d0g"
[
	//Inputs
	input SetPickupTarget(string) : "Sets the target entity for dog to pickup."
	input StartCatchThrowBehavior(string) : "Tells d0g to start playing with the player. You can pass in the name of the object you want him to play with otherwise he'll find the closes phys_object."
	input StopCatchThrowBehavior(string) : "Stop the catch and throw behavior."
	input PlayerPickupObject(void) : "Tells d0g the physgun just picked up an object."
	input StartWaitAndCatch(void) : "Tells d0g to wait for the player to throw an object at him."
	input StopWaitAndCatch(void) : "Tells d0g to stop waiting for the player."
	input SetThrowArcModifier(float) : "Used to pass in a modifier for d0g's object flight arc."
	input SetThrowTarget(string) : "Set d0g's throw target (pass in !player if you want the player)"
	input TurnBoneFollowersOff(void) : "Turn dog's bone followers off"
	input TurnBoneFollowersOn(void) : "Turn dog's bone followers on"
	
	// Outputs
	output OnDogThrow(void) : "Fires when dog throws an object."
	output OnDogPickup(void) : "Fires when dog picks up an object."
	output OnDogCatch(void) : "Fires when dog catches an object."
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = monster_generic : "Generic Script NPC"
[
	spawnflags(Flags) = 
	[
		65536 : "Not solid" : 0
	]
	model(studio) : "Model"
	body(Integer) : "Body" : 0
	skin(integer) : "Skin" : 0 : "Model skin"
]


@PointClass base(Studiomodel, BaseNPC, Parentname, RenderFields, Shadow) studio() = generic_actor : "Generic Actor NPC"
[
	model(studio) : "Model"

	hull_name(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
	skin(integer) : "Skin" : 0 : "Model skin"
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = cycler_flex : "Actor Cycler"
[
	model(studio) : "Model"
	Sentence(string) : "Sentence Group" : ""

	input Alpha(integer) : "Set Alpha Value"
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = cycler_actor : "Actor Cycler"
[
	model(studio) : "Model"
	Sentence(string) : "Sentence Group" : ""

	input Alpha(integer) : "Set Alpha Value"
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = npc_maker : "NPC Maker"
[
	spawnflags(Flags) = 
	[
		16 : "Fade Corpse" : 0
	]

	NPCType(npcclass) : "Class name of spawned NPC"
	NPCTargetname(string) : "Childrens' Name"
	NPCSquadname(string) : "Childrens' Squad Name"
	NPCHintGroup(string) : "Childrens' Hint Group"
	
	additionalequipment(choices) : "Weapons" : "0" =
	[
		"weapon_pistol" : "Pistol"
		"weapon_ar2" : "AR2"
		"weapon_shotgun" : "Shotgun"
		"weapon_smg1" : "SMG1"
		"weapon_stunstick" : "Stun Stick"
		"weapon_annabelle"	:"Grigori's Shotgun"
		"0" : "Nothing"
	]
]

@PointClass base(Angles, BaseNPCMaker) size(-8 -8 -8, 8 8 8) color(0 0 255) = npc_antlion_template_maker : "Antlion Template Maker"
[
	spawnflags(Flags) = 
	[
		1024 : "Random spawn node" : 0
		2048 : "Try to spawn close to the current target" : 0
		4096 : "Pick a random fight target" : 0
		8192 : "Try to play blocked effects near the player" : 0
	]

	TemplateName(target_destination) : "Name of template NPC"	
	
	OptionalModelName(string) : "(Optional) Model Name" : "" : "If not empty, the spawned NPCs will be given this model, if they support multiple models."

	spawngroup(string) : "Spawn on Hint Group" : "" : "If specified, children will spawn on a hint node from this group, nearest the target."
	spawnradius(float) : "Spawn radius" : 512 : "Target must be within this distance of any node in the hint group specified above. If the target is outside the radius, no NPC will spawn."
	spawntarget(string): "Spawn target" : "" : "Targetname of the entity to try and spawn near."
	fighttarget(string): "Fight target" : "" : "Targetname of an entity used as a goal for the children to fight to."
	followtarget(string): "Follow target" : "" : "Targetname of an entity used as a goal for the children to follow."
	vehicledistance(float): "Vehicle Spawn Distance" : "1" : "This is a modifier of the current spawn distance. Spawn distance on a vehicle is based on speed, so this is just a modifier for it."
	workerspawnrate(float): "Random Worker Spawn Rate" : "0" : "Percentage chance that a spawned antlion will be a worker. (0 = no chance, 1 = 100% chance)"
	
	ignorebugbait(choices): "Ignore Bugbait" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]

	pool_start(integer) : "Initial antlions in the pool." : 0 : "Number of antlions in the pool at map start."
	pool_max(integer) : "Max antlions in the pool." : 0 : "Maximum number of antlions allowed in the pool. If 0, pool behavior is turned off."
	pool_regen_amount(integer) : "Pool regen amount." : 0 : "This is the number of antlions added to the pool every time it regenerates."
	pool_regen_time(float) : "Pool regen time." : 0 : "Time interval between pool regeneration ticks."

	// Inputs
	input SetFightTarget(string) : "Sets the target entity for children to fight to."
	input ClearFightTarget(void) : "Clears the fight target goal for this spawner."
	input SetFollowTarget(string) : "Sets the target entity for children to follow."
	input ClearFollowTarget(void) : "Clears the follow target goal for this spawner."
	input SetSpawnRadius(float) : "Sets the Spawn Radius."
	input AddToPool(integer) : "Add the number of antlions specified in the parameter to the pool."
	input SetMaxPool(integer) : "Set the maximum number of antlions allowed in the pool at any time. Setting it to 0 turns off the pool behavior."
	input SetPoolRegenAmount(integer) : "Set the number of antlions added to the pool every time it regenerates."
	input SetPoolRegenTime(float) : "Set the time interval between pool regeneration ticks."
	input ChangeDestinationGroup(string) : "Change the spawn group for this spawner."

    // Outputs
	output OnAllBlocked(void) : "Fires when all the hint nodes are blocked."

	createspores(choices): "Create Spore effect" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname) sphere(repelradius) color(0 0 255) = point_antlion_repellant : "Antlion Repellant"
[
	repelradius(float): "Repell radius" : 512 : "Antlions aren't allowed to be inside this radius"
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]
 
//-------------------------------------------------------------------------
//
// Scripted Events
//
//-------------------------------------------------------------------------

@BaseClass base(Targetname, Parentname, Angles) color(255 0 255) sphere(m_flRadius) = BaseScripted
[
	m_iszEntity(target_destination) : "Target NPC" : : "The name or class name (such as 'npc_zombie') of an NPC to use for this script."
	m_iszIdle(string) : "Pre Action Idle Animation" : "" : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must wait for the script to be triggered. Use 'Start on Spawn' flag or MoveToPosition input to play this idle animation."
	m_iszEntry(string) : "Entry Animation" : "" : "The name of the sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play when the sequence starts, before transitioning to play the main action sequence."
	m_iszPlay(string) : "Action Animation" : "" : "The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play."
	m_iszPostIdle(string) : "Post Action Idle Animation" : "" : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play after the action animation."
	m_iszCustomMove(string) : "Custom Move Animation" : "" : "Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'crouch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position."
	m_bLoopActionSequence(Choices) : "Loop Action Animation?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	m_bSynchPostIdles(Choices) : "Synch Post Idles?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."
	m_flRepeat(integer) : "Repeat Rate ms" : 0
	m_fMoveTo(Choices) : "Move to Position" : 1 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		3 : "Custom movement"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
	]
	m_iszNextScript(target_destination) : "Next Script" : : "The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts."
	m_bIgnoreGravity(choices) : "Ignore Gravity on NPC during script" : 0 : "If this is set to 'Yes', the NPC will not be subject to gravity while playing this script." =
	[
		0 : "No"
		1 : "Yes"
	]
	m_bDisableNPCCollisions(choices) : "Disable NPC collisions during script" : 0 : "Useful for when NPCs playing scripts must interpenetrate while riding on trains, elevators, etc. This only disables collisions between the NPCs in the script and must be enabled on BOTH scripted_sequences." =
	[
		0 : "No"
		1 : "Yes"
	]


	// Inputs
	input BeginSequence(void) : "Summons an NPC to act out the scripted sequence."
	input MoveToPosition(void) : "Summons an NPC to the script location. They will play their scripted idle (or ACT_IDLE if none is specified) until BeginSequence is triggered."
	input CancelSequence(void) : "Stops the scripted sequence. If fired after a sequence starts, this input will not take effect until the NPC finishes playing the scripted action animation."

	// Outputs
	output OnBeginSequence(void) : "Fires when the action animation begins playing."
	output OnEndSequence(void) : "Fires when the action animation completes."
	output OnCancelSequence(void) : "Fires when the sequence is cancelled."
	output OnCancelFailedSequence(void) : "Fires when the sequence is cancelled without ever playing (OnCancelSequence will also fire)."
	output OnScriptEvent01(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 1 } in the QC."
	output OnScriptEvent02(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 2 } in the QC."
	output OnScriptEvent03(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 3 } in the QC."
	output OnScriptEvent04(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 4 } in the QC."
	output OnScriptEvent05(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 5 } in the QC."
	output OnScriptEvent06(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 6 } in the QC."
	output OnScriptEvent07(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 7 } in the QC."
	output OnScriptEvent08(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 8 } in the QC."
]

@PointClass sphere() iconsprite("editor/scripted_sentence.vmt") base(Targetname) = scripted_sentence : "Scripted Sentence"
[
	spawnflags(Flags) = 
	[
		1 : "Fire Once"  : 1
		2 : "Followers Only" : 0
		4 : "Interrupt Speech" : 1
		8 : "Concurrent" : 0
		16 : "Speak to Activator" : 1
	]

	sentence(string) : "Sentence Name" : ""
	entity(string) : "Speaker Type"
	delay(string) : "Additional Sentence Time" : "0"
	radius(integer) : "Search Radius" : 512
	refire(string) : "Delay Before Refire" : "3"
	listener(string) : "Listener Type"
	volume(string) : "Volume 0-10" : "10"
	attenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]

	// Inputs
	input BeginSentence(void) : "Starts the scripted sentence."

	// Outputs
	output OnBeginSentence(void) : "Fires when the sentence begins"
	output OnEndSentence(void) : "Fires when the sentence ends"
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = scripted_target : "Scripted Target"
[
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	m_iszEntity(npcclass) : "Target NPC"
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	MoveSpeed(integer) : "Move Speed" : 5			// How quickly should target move between scripted targets
	PauseDuration(integer) : "Pause Duration" : 0		// How long should target pause at scripted target
	EffectDuration(integer) : "Effect Duration" : 2		// How long should any associated effect last

	target(target_destination) : "Next Target"		// Next scripted target

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output AtTarget(void) : "Fires when NPC reaches this target"
	output LeaveTarget(void) : "Fires when NPC leaves this target"
]

@PointClass base(Targetname) iconsprite("editor/ai_relationship.vmt") sphere() = ai_relationship : 
	"AI Relationship - Sets relationships between groups of NPCs in the AI."
[
	subject(target_name_or_class) : "Subject(s)" : "" : "This is the NPC(s) whose disposition will change. May be a targetname or a classname."
	target(target_name_or_class) : "Target(s)" : "" : "This is the NPC(s) about whom the Subject(s) will change their disposition. May be a tarGetname or a classname."
	disposition(choices) : "Disposition" : 3 : "Choose the way the Subject(s) should feel about the Target(s)" =
	[
		// These MUST match the enum in the code! (basecombatcharacter.h)
		1 : "Hate"
		2 : "Fear"
		3 : "Like"
		4 : "Neutral"
	]

	radius(float) : "Radius for subject" : 0

	rank(integer) : "Disposition Priority" : 0 : "How much the Subject(s) should Like/Hate/Fear the Target(s). Higher priority = stronger feeling."

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	Reciprocal(choices) : "Reciprocal" : 0 : "Set this to YES to have the new relationship mirrored by Target"  =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(flags) =
	[
		1 : "Notify subject of target's location" : 0
		2 : "Notify target of subject's location" : 0
	]
	
	// Inputs
	input ApplyRelationship(void) : "Apply relationship changes. This will change all Subject entities' relationships to all Target entities. \n\nIMPORTANT: Once you ApplyRelationships, this entity is then 'ALWAYS ON' until you send a Disable input or RevertRelationship input. During the time this entity is 'ON', any entities that spawn who match the Subject or Target names will be affected. \n\nIMPORTANT: Unpredictable results may occur when two ai_relationship entities refer to the same set or subset of target or subject entities. This situation should be avoided."

	input RevertRelationship(void) : "Revert relationship changes. This will return the relationship to what it was at the time the ApplyRelationship input was called (or when this ai_relationship was spawned if StartActive is set)."
	input RevertToDefaultRelationship(void) : "Revert relationship changes to the default relationship, which may have changed since this ai_relationship was applied. This returns control of the entity relationship to the code."
]

@PointClass base(Targetname) = ai_ally_manager : "AI Ally Manager"
[
	maxallies(integer) : "Maximum number of allies" : 5
	maxmedics(integer) : "Maximum number of medics" : 1

	// Inputs
	input SetMaxAllies(integer) : "Set maximum number of allies"
	input SetMaxMedics(integer) : "Set maximum number of medic allies"
	input Replenish(void) : "Replenish player allies"

	// Outputs
	output SpawnMedicAlly(void) : "Spawn Medic Ally"
	output SpawnAlly0(void) : "Spawn Ally 0"
	output SpawnAlly1(void) : "Spawn Ally 1"
	output SpawnAlly2(void) : "Spawn Ally 2"
	output SpawnAlly3(void) : "Spawn Ally 3"
	output SpawnAlly4(void) : "Spawn Ally 4"
	output SpawnAlly5(void) : "Spawn Ally 5"
	output SpawnAlly6(void) : "Spawn Ally 6"
	output SpawnAlly7(void) : "Spawn Ally 7"
	output SpawnAlly8(void) : "Spawn Ally 8"
	output SpawnAlly9(void) : "Spawn Ally 9"

	output OnZeroAllies(void) : "Fires when there are no more allies"
	output OnZeroMedicAllies(void) : "Fires when there are no more allies"
]

@BaseClass base(Targetname) = LeadGoalBase
[
	actor(target_name_or_class) : "Actor(s) to affect"
	goal(string) : "Target Entity"
	WaitPointName(target_destination) : "Point to wait at if the target's not visible"
	WaitDistance(float) : "Wait until player gets this close"
	LeadDistance(float) : "Lead Distance" : "64" : "The player is considered to be lagging if he's beyond this distance.  The Actor will consider retrieving when the player is 4x 'Lead Distance' away."
	RetrieveDistance(float) : "Retrieve Distance" : "96" : "The distance from the player that the NPC should return to when retrieving a lagging player. Must be between ('Lead Distance' + 24) and ('Lead Distance' * 4) to avoid the leader ping-ponging."
	SuccessDistance(float) : "Success Distance" : "0" : "The distance from the player (to the NPC) that the player must be within for the Lead to succeed, once the NPC has reached the goal. If set to 0, it'll use the lead distance instead (for legacy support)."
	Run(choices) : "Run instead of Walk" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	Retrieve(choices) : "Retrieve player?" : 1 =
	[
		0 : "No, just idle and wait"
		1 : "Yes, move to retrieve"
	]	
	ComingBackWaitForSpeak(choices) : "Before Coming Back, Wait for speech?" : 1 =
	[
		0 : "No, come back while speaking"
		1 : "Yes, wait for speech to finish"
	]
	RetrieveWaitForSpeak(choices) : "On Retrieve, Wait for speech?" : 1 =
	[
		0 : "No, start leading while speaking"
		1 : "Yes, wait for speech to finish"
	]
	DontSpeakStart(choices) : "Speak start greeting?" : 0 =
	[
		0 : "Yes, speak the start greeting"
		1 : "No, don't speak the greeting"
	]
	LeadDuringCombat(choices) : "Lead during combat?" : 0 =
	[
		0 : "No. Stop to fight, resume leading when safe."
		1 : "Yes, lead while fighting."
	]
	GagLeader(choices) : "Gag Leader?" : 0 =
	[
		0 : "No. Speak lead concepts normally, respecting other lead speech settings."
		1 : "Yes, don't speak any lead concepts at all, overriding all other lead speech settings."
	]
	
	AttractPlayerConceptModifier(string)	: "Attract player concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ATTRACTPLAYER' concept is spoken."
	WaitOverConceptModifier(string)		: "Player wait over concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_WAITOVER' concept is spoken."
	ArrivalConceptModifier(string)		: "Arrival concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ARRIVAL' concept is spoken."
	PostArrivalConceptModifier(string)	: "Post-arrival concepts modifier"
	SuccessConceptModifier(string)		: "Success concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_SUCCESS' concept is spoken."
	FailureConceptModifier(string)		: "Failure concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'lead_fail' concept is spoken."
	ComingBackConceptModifier(string)	: "Coming Back concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_RETRIEVE' concept is spoken. Spoken as the NPC starts returning to the player to retrieve him."
	RetrieveConceptModifier(string)		: "Retrieve concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_COMINGBACK' concept is spoken. Spoken when NPC has finally reached the player to retrieve him."
	
	// Spawnflags
	spawnflags(Flags) = 
	[
		1 : "No def success" : 0
		2 : "No def failure" : 0
		4 : "Use goal facing" : 1
	]

	// Inputs
	input Activate( void )  : "Begin the leading behavior"
	input Deactivate( void )  : "Stop the leading behavior"
	
	input SetSuccess( void ) : "Notify success of leading"
	input SetFailure( void ) : "Notify failure of leading"
	
	// Outputs
	output OnArrival( void ) : "Fires when NPC reaches the lead point"
	output OnArrivalDone( void ) : "Fires when NPC has played out any arrival speech"
	output OnSuccess( void ) : "Fires when NPC achieves the goal"
	output OnFailure( void ) : "Fires when NPC fails to achieves the goal"
	output OnDone( void ) : "Fires when NPC completes behavior (any post-success or fail acting is complete)"
]

@PointClass base(LeadGoalBase) iconsprite("editor/ai_goal_lead.vmt") = ai_goal_lead : "AI Goal Lead"
[
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	]
]

@PointClass base(LeadGoalBase) iconsprite("editor/ai_goal_lead.vmt") = ai_goal_lead_weapon : 
	"AI Goal Lead (Weapon). A version of the ai_goal_lead entity that requires the player to have the specified weapon before the Actor(s) will lead the player to their target."
[
	WeaponName(choices) : "Weapon" : "weapon_bugbait" =
	[
		"weapon_bugbait" : "Bugbait"
		"weapon_smg1" : "SMG1"
		"weapon_ar2"  : "AR2"
	]

	MissingWeaponConceptModifier(string) : "Missing weapon concept modifier"
	
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 
]

@BaseClass base(Targetname) = FollowGoal
[
	actor(target_name_or_class) : "Actor(s) to affect"
	goal(string) : "Target Entity" : : "The name of the entity to follow. If blank, and the actor likes the player, then defaults to player"

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	MaximumState(choices) : "Maximum state" : 1 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]

	Formation(choices) : "Formation" : 0 =
	[
		0 : "Close circle"
		1 : "Wide circle"
		5 : "Medium circle"
		6 : "Sidekick"
		8 : "Vortigaunt"
	]

	// Inputs
	input Activate( void ) : "Begin the follow behavior"
	input Deactivate( void ) : "Cease the follow behavior"
]

@PointClass base(FollowGoal) iconsprite("editor/ai_goal_follow.vmt") = ai_goal_follow : "AI Goal Follow"
[
]

@PointClass base(FollowGoal) iconsprite("editor/ai_goal_follow.vmt") = ai_goal_injured_follow : "AI Goal Injured Follow"
[
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Angles, Parentname) studio("models/pigeon.mdl") = ai_battle_line : "Battle line"
[																									  
	// Spawnflags
	spawnflags(Flags) = 
	[
		1 : "Use parent's orientation" : 0
	]

	actor(target_name_or_class) : "Actor(s) or squad to affect"

	Active(choices) : "Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	Strict(choices) : "Strict" : 1 : "Player orders can override, applies to allies only" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Activate(void)
	input Deactivate(void)
]

@PointClass base(Targetname) iconsprite("editor/ai_goal_standoff.vmt") = ai_goal_standoff : "AI Goal Standoff"
[
	actor(target_name_or_class) : "Actor(s) to affect"
//	goal(string) : "Target Entity (self by default) [NOT IMPLEMENTED]"

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	HintGroupChangeReaction(Choices) : "Reaction to tactical change" : 1 : "What to do if leader moves, threat is neutralized, hint group changes, etc" =
	[
		0 : "Move when ready (default AI)"
		1 : "Move when seek cover"
		2 : "Move immediately"
	]

	Aggressiveness(Choices) : "Aggressiveness" : 2 =
	[
		0 : "Very low"
		1 : "Low"
		2 : "Medium"
		3 : "High"
		4 : "Very High"
		// Custom agression disabled
		// 		100 : "Custom"
	]

	PlayerBattleline(choices) : "Player battleline" : 1 : "Player defines a battle line, applies to allies only" =
	[
		0 : "No"
		1 : "Yes"
	]

	StayAtCover(choices) : "Stay at cover location" : 0 : "When have suitable cover, don't change it (disables advancing to battle line)" =
	[
		0 : "No"
		1 : "Yes"
	]

	AbandonIfEnemyHides(choices) : "Abandon if enemies hide" : 0 : "If no enemy detected recently, stop the standoff" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Custom aggression
	CustomCoverOnReload(choices) : "Custom: Take cover to reload" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	CustomMinTimeShots(float) : "Custom: Min time wait to shoot"	  : 2 : "Minimum duration of time after a burst of shooting before trying again"
	CustomMaxTimeShots(float) : "Custom: Max time wait to shoot"	  : 4 : "Minimum duration of time after a burst of shooting before trying again"
	CustomMinShots(integer) : "Custom: Min shots in a burst"	  : 1
	CustomMaxShots(integer) : "Custom: Max shots in a burst"	  : 4
	CustomOddsCover(integer) : "Custom: Odds cover on damage"	  : 25 : "If damaged, the chances react by taking immediate cover"

	// Inputs
	input Activate( void ) : "Begin contesting position"
	input Deactivate( void ) : "Cease contesting position"
	input SetAggressiveness(integer) : "Set aggressiveness"
]

@PointClass base(Targetname, Parentname, Angles) sphere(policeradius) iconsprite("editor/ai_goal_police.vmt") = ai_goal_police : "AI Goal Police"
[
	spawnflags(Flags) = 
	[
		2 : "Knock-out target past crossing plane" : 0
		4 : "Do not leave post" : 0
	]

	policeradius(float) : "Radius" : 512 : "Radius to police"
	policetarget(string) : "Target" : "" : "Target to police"

	// Inputs
	input EnableKnockOut(void) : "Tells the goal to make the active policing NPC knock out its target"
	input DisableKnockOut(void) : "Stop the active policing NPC from trying to knock out its target"

	// Outputs
	output OnFirstWarning(void) : "Fires the first time a policing cop warns a target"
	output OnSecondWarning(void) : "Fires the second time a policing cop warns a target"
	output OnLastWarning(void) : "Fires when a policing cop warns a target for the last time"
	output OnSupressingTarget(void) : "Fires when a policing cop starts to suppress (ie. beat) a target"
	output OnKnockOut(void) : "Fires when a target has been knocked out"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/assault_rally.vmt") line(255 255 255, targetname, assaultpoint) = assault_rallypoint : 
	"(Assault) rally point"
[
	assaultpoint(target_destination)  : "Assault Point" : "" : "Location to move to as assault begins"
	assaultdelay(float) : "Assault Delay" : 0 : "How long to wait after cue is given before assault begins."
	rallysequence(string) : "Rally Sequence" : "" : "Override the NPC's wait activity by entering a sequence name."
	priority(integer) : "Priority" : 1 : "Higher priority rally points get selected first."

	forcecrouch(choices) : "Force Crouch" : 0 : "NPCs using this assault point are forced into crouching while holding it." =
	[
		0 : "No"
		1 : "Yes"
	]

	urgent(choices) : "Urgent" : 0 : "If true, NPCs will consider movement to this rally point as Urgent Navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnArrival(void) : "Fires when the NPC reaches this rally point"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/assault_point.vmt") line(255 255 255, targetname, nextassaultpoint) = assault_assaultpoint : 
	"(Assault) assault point"
[
	assaultgroup(string)  : "Assault Hint Group" : "" : "NPC's movements are constrained to this hint group once assault has begun"
	nextassaultpoint(target_destination) : "Next assault point (optional)"
	assaulttimeout(float) : "Assault time out" : "3.0" : "This point is cleared when no enemies are seen for this long (seconds)"
	clearoncontact(choices) : "Clear on contact with enemies" : 0 : "If you come in contact with enemies while approaching the assault point, clear our assault point" =
	[
		0 : "No"
		1 : "Yes"
	]
	allowdiversion(choices) : "Allow diversion" : 0 : "If you come in contact with enemies while approaching the assault point, divert to kill them. Resume the assault once contact is lost." =
	[
		0 : "No"
		1 : "Yes"
	]

	allowdiversionradius(float) : "Diversion Proximity" : 0 : "If Allow Diversion is set, NPC will only divert from assault to attack an enemy that is within this distance of the assault point. 0 = No limit."

	nevertimeout(choices) : "Never Timeout" : 0 : "If set, the assault never ends for NPCs assaulting this point. Useful for forcing NPCs back to a point." =
	[
		0 : "No"
		1 : "Yes"
	]

	strict(choices) : "Strict?" : 0 =
	[
		0 : "No, NPC may move from point to attack"
		1 : "Yes, NPC may not move to attack"
	]

	spawnflags(Flags) = 
	[
		1 : "Clear this point upon arrival, UNCONDITIONALLY" : 0
	]

	forcecrouch(choices) : "Force Crouch" : 0 : "NPCs using this assault point are forced into crouching while holding it." =
	[
		0 : "No"
		1 : "Yes"
	]

	urgent(choices) : "Urgent" : 0 : "If true, NPCs will consider movement to this assault point as Urgent Navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	assaulttolerance(choices) : "Attack Tolerance" : 36 : "How far this NPC may move from the assault point to try to attack an enemy." =
	[
		36 : "Tight (3ft)"
		72 : "Medium (6ft)"
		120 : "Large (10ft)"
	]


	// Inputs
	input SetClearOnContact(integer) : "Set the clear on contact flag. NPCs who spot enemies while running to the assault point, or while waiting at it, will immediately Clear it."
	input SetAllowDiversion(integer) : "Set the allow diversion flag. NPCs who spot enemies whil running to the assault point, or while waiting on it, will divert away (leave Assault mode) to deal with the enemies. Upon losing enemies, they'll go back to Assault mode, and return to this assault point."
	input SetForceClear(integer) : "Set the Force Clear flag. NPCs who are currently running to the assault point will Clear it immediately. NPCs who acquire it in the future will Clear it automatically."

	// Outputs
	output OnArrival(void) : "Fires when the NPC reaches this assault point"
	output OnAssaultClear(void) : "Fires when this assault point is cleared of enemies"
]

@PointClass base(Targetname) = ai_goal_assault : 
	"AI Goal Assault"
[
	actor(target_name_or_class) : "Actor(s) to affect" : "" : "NPC's that should perform this assault"
	rallypoint(target_destination) : "Rally Point Set" : "" : "Root name of rally points for this assault. Use an asterisk '*' after the root name to match all with the same root."

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	AssaultCue(choices) : "Assault Cue" : 1 =
	[
		1 : "Entity System Input"
		2 : "Gunfire"
		3 : "Don't wait for a cue."
	]

	RallySelectMethod(choices) : "Rally Point Selection Method" : 0 = 
	[
		0 : "Priority, Distance (default)"
		1 : "Random"
	]


	// Inputs
	input Activate( void ) : "Begin the assault behavior"
	input Deactivate( void ) : "Cease the assault behavior"
	input BeginAssault( void ) : "Begin assault phase"
]

@BaseClass base(Targetname) = BaseActBusy
[
	actor(target_name_or_class) : "Actor(s) to affect" : "" : "NPC's that should act busy"

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	busysearchrange(float) : "Search Range for Busy Hints" : 2048
	visibleonly(choices) : "Visible Busy Hints Only" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Activate( void ) : "Begin acting busy"
	input Deactivate( void ) : "Cease acting busy"
	input SetBusySearchRange( float ) : "Update the busy search range for all actors."
	input ForceNPCToActBusy( string ) : "Force an NPC to act busy. Takes parameters, separated by spaces: <Targetname> <hint node targetname> <optional:teleport> <optional:$customactivityorsequence> <maximum time to actbusy>. If no hint node targetname is specified, it'll search for a random one. If no max time is specified, it'll use the default. Specifying 0 as the max time will make the NPC act busy until disturbed. If the optional teleport parameter is specified, the NPC will teleport to the act busy point. A custom move animation can be specified by prepending $ to the name of it. i.e. $ACT_RUN will make the NPC Run. Sequence names can be used instead of activities."
	input ForceThisNPCToActBusy( string ) : "Force an NPC outputted from another entity to act busy. (only usable from an output that specifies an entity)"
	input ForceThisNPCToLeave( string ) : "Force an NPC outputted from another entity to find a HINT_NPC_EXIT_POINT hintnode and vanish."

	// Outputs
	output OnNPCStartedBusy(string) : "Fired when an NPC targeted by this goal starts an ActBusy animation."
	output OnNPCFinishedBusy(string) : "Fired when an NPC targeted by this goal finishes an ActBusy."
	output OnNPCLeft(string) : "Fired when an NPC target by this goal finishes a forced Leave."
]

@PointClass base(BaseActBusy) = ai_goal_actbusy : "AI Goal Act Busy"
[
	seeentity(target_name_or_class) : "Sight Entity" : "" : "The Sight Entity (if you provide one) is an entity that will leave the current ActBusy if the Actor playing the ActBusy loses sight of it for the amount of time specified in 'Sight Entity Timeout'. THIS MAY ONLY BE A TARGET NAME. NO CLASSNAMES."

	seeentitytimeout(string) : "Sight Entity Timeout" : "1" : "If you provide a Sight Entity, the Actor will leave the current ActBusy if the Actor has lost sight of Sight Entity for this many seconds."

	sightmethod(choices) : "Sight Enemy Method" : 0 : "The method to use to determine whether the Sight enemy is visible." = 
	[
		0 : "Default. LOS -and- Viewcone"
		1 : "LOS Only. Disregard Viewcone"
	]


	type(choices) : "Actbusy Type" : 0 =
	[
		0 : "Default (Standard)"
		1 : "Combat"
	]

	safezone(target_destination) : "Combat Safe Zone" : "" : "Only for combat actbusy. Lets you specify a volume which is the 'safe zone'. The Combat ActBusy will cancel if any enemies are seen in the safe zone."


	allowteleport(choices) : "Allow actor to teleport?" : 0 =
	[
		0 : "No"
		1 : "Yes (Only for Combat Actbusy)"
	]
	
	input ExitCurrentBusy(string) : ""

	output OnNPCLostSeeEntity(void) : "Fired when the NPC loses sight of the see entity (if one is specified)."
	output OnNPCSeeEnemy(void)  : "Fired when this NPC leaves his actbusy because of sighting an enemy."
]

@PointClass base(BaseActBusy) = ai_goal_actbusy_queue : "AI Goal Act Busy Queue"
[
	node_exit(target_destination) : "Exit Node" : "" : "The name of the node the first NPC in the queue should move to when he leaves the head of the queue."
	node01(target_destination) : "Node 1" : "" : "The name of the first actbusy hint node in the queue."
	node02(target_destination) : "Node 2" : "" : "The name of the second actbusy hint node in the queue."
	node03(target_destination) : "Node 3" : "" : "The name of the third actbusy hint node in the queue."
	node04(target_destination) : "Node 4" : "" : "The name of the fourth actbusy hint node in the queue."
	node05(target_destination) : "Node 5" : "" : "The name of the fifth actbusy hint node in the queue."
	node06(target_destination) : "Node 6" : "" : "The name of the sixth actbusy hint node in the queue."
	node07(target_destination) : "Node 7" : "" : "The name of the seventh actbusy hint node in the queue."
	node08(target_destination) : "Node 8" : "" : "The name of the eighth actbusy hint node in the queue."
	node09(target_destination) : "Node 9" : "" : "The name of the ninth actbusy hint node in the queue."
	node10(target_destination) : "Node 10" : "" : "The name of the tenth actbusy hint node in the queue."
	node11(target_destination) : "Node 11" : "" : "The name of the eleventh actbusy hint node in the queue."
	node12(target_destination) : "Node 12" : "" : "The name of the twelfth actbusy hint node in the queue."
	node13(target_destination) : "Node 13" : "" : "The name of the thirteenth actbusy hint node in the queue."
	node14(target_destination) : "Node 14" : "" : "The name of the fourteenth actbusy hint node in the queue."
	node15(target_destination) : "Node 15" : "" : "The name of the fifteenth actbusy hint node in the queue."
	node16(target_destination) : "Node 16" : "" : "The name of the sixteenth actbusy hint node in the queue."
	node17(target_destination) : "Node 17" : "" : "The name of the seventeenth actbusy hint node in the queue."
	node18(target_destination) : "Node 18" : "" : "The name of the eighteenth actbusy hint node in the queue."
	node19(target_destination) : "Node 19" : "" : "The name of the nineteenth actbusy hint node in the queue."
	node20(target_destination) : "Node 20" : "" : "The name of the twentieth actbusy hint node in the queue."
	 
	mustreachfront(choices) : "Must Reach Front" : 0 : "If true, NPCs much reach the front node in the queue before they're allowed to leave the queue." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input PlayerStartedBlocking(float) : "Tell the queue manager that the player has started blocking a spot in the queue."
	input PlayerStoppedBlocking(float) : "Tell the queue manager that the player has stopped blocking a spot in the queue."
	input MoveQueueUp(void) : "Force the queue to move up, sending the front-most NPC out of the queue."

	// Outputs
	output OnQueueMoved(float) : "Fired when the queue moves. Outputs the number of NPCs left in the queue."
	output OnNPCStartedLeavingQueue(string) : "Fired when the NPC at the head of the queue starts to leave. The activator is the NPC, and the string is the name of the NPC."
	output OnNPCLeftQueue(string) : "Fired when the NPC at the head of the queue leaves. The activator is the NPC, and the string is the name of the NPC."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = ai_changetarget : "Change Target"
[
	target(target_destination) : "Target entity" : : "Name of entity whose target will be changed."
	m_iszNewTarget(string) : "New Target"

	// Inputs
	input Kill( void ) : "Removes this entity from the world"
	input Activate( void ) : "Changes the entities target"
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = ai_npc_eventresponsesystem : "An entity that allows you to generate events for nearby friendly NPCs to respond to."
[
	input TriggerResponseEvent(string) : "Fire an NPC Response Event. The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
	input ForceTriggerResponseEvent(string) : "Fire an NPC Response Event, and force the first available NPC to speak the response (breaking them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
	input ForceTriggerResponseEventNoCancel(string) : "Fire an NPC Response Event, and force the first available NPC to speak the response (but don't break them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
]
@PointClass base(Targetname) sphere(Radius)  size(-8 -8 -8, 8 8 8) = ai_changehintgroup : "Change Hint Group"
[
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities to change." = 
	[
		0 : "Entity Name"
		1 : "Classname"
		2 : "Old Hint Group"
	] 
	SearchName(string) : "Name to search for"
	NewHintGroup(string) : "New Hint Group"
	Radius(string) : "Search Radius" : "0.0" : "Radius to search (0 for all of map)"
	hintlimiting(choices) : "Hint Limit Nav" : 0 : "Limits NPC to using specified hint group for navigation requests, does not limit local navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	input Kill( void ) : "Removes this entity from the world"
	input Activate( void ) : "Change the Hint Group"
]



@PointClass base(Targetname) sphere(PlayerActorProximity) = ai_script_conditions : "AI Script Conditions"
[
	Actor(target_destination) : "Actor" : : "NPC Target"
	
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	MinimumState(choices) : "Minimum state" : 1 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]

	MaximumState(choices) : "Maximum state" : 3 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]
	
	ScriptStatus(choices) : "Actor is running a script?" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
		
	RequiredTime(float) : "Required Time"	  : 0 : "Duration of time that all the conditions must be true"
	MinTimeout(float) : "Minimum time out"  : 0 : "Minimum time before OnConditionsTimeout is fired. 0 = never expire."
	MaxTimeout(float) : "Maximum time out"  : 0 : "Maximum time before OnConditionsTimeout is fired. 0 = ignore (If you don't specify a Maximum timeout, conditions will time out at exactly Minimum Time Out. If you DO specify a Maximum time out, timeout will occur randomly between Minimum and Maximum time out values.)"
	
	ActorSeePlayer(choices) : "Actor Sees Player" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	PlayerActorProximity(float) : "Player distance"  : 0 : "The distance the player must/must not be to the actor. Negative values for NOT, 0 for ignore."
	PlayerActorFOV(float) : "Player FOV for Actor " : 360 : "Specify angle of view cone in degrees. Negative value = NOT"
	PlayerActorFOVTrueCone(choices ) : "Play FOV to Actor is a true view cone" : 0 : "Player's view cone is evaluated as a true cone, not pie slice " = 
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]

	PlayerActorLOS(choices) : "Player has LOS to Actor" : 2 : "Checks that the player has clear Line of Sight to the Actor" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]


	target(target_destination) : "Target (Optional)" : : "Optional entity to include in conditions"
	ActorSeeTarget(choices)  : "Actor Sees Target" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorTargetProximity(float) : "Target distance"  : 0 : "The distance the actor must/must not be to the Target. Negative values for NOT, 0 for ignore."
	PlayerTargetProximity(float) : "Player distance from Target"  : 0 : "The distance the player must/must not be to the Target. Negative values for NOT, 0 for ignore."
	PlayerTargetFOV(float) : "Player FOV for Target" : 360 : "Specify angle of view cone in degrees. Negative value = NOT"
	PlayerTargetFOVTrueCone(choices ) : "Play FOV to Target is a true view cone" : 0 : "Player's view cone is evaluated as a true cone, not pie slice " = 
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]

	PlayerTargetLOS(choices) : "Player has LOS to Target" : 2 : "Checks that the player has clear Line of Sight to the Target" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	
	PlayerBlockingActor(choices) : "Player blocking Actor" : 2 : "Checks that the player is blocking the Actor's path" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorInPVS(choices)	: "Actor in Player's PVS" : 2 : "Checks that the actor is in the player's PVS" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorInVehicle(choices)	: "Actor in a vehicle" : 2 : "Checks the actor's state in a vehicle" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	PlayerInVehicle(choices)	: "Player in a vehicle" : 2 : "Checks the player's state in a vehicle" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	spawnflags(Flags) = 
	[
		1 : "Fire outputs with the Actor as Activator"	: 0
	]

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output OnConditionsSatisfied(void) : "Fires when AI conditions satisfied"
	output OnConditionsTimeout(void)   : "Fires when AI conditions timed out"
	output NoValidActor(void) : "Fires if/when there are no matching actors in the map."
]

@PointClass base(BaseScripted, Angles, DXLevelChoice) studio("models/editor/scriptedsequence.mdl") sphere(m_flRadius) = scripted_sequence :
	"Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or can "+
	"be told to play the script wherever they currently are. "+
	"Multiple scripted sequences of the same name will frame-synchronize in the action animation once all the actors have moved to position. "+
	"This allows tight interaction between actors (one actor grabbing another, hitting them, etc.) The flow is as follows:\n\n"+
	"1) Move to position using the specified movement animation. If 'Move to Position' is set to NONE, skip to step 2.\n"+
	"2) If forced to wait for another actor to move to position, play the pre-action idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n"+
	"3) Fire the OnBeginSequence output.\n"+
	"4) Play the action animation. If no action animation is specified, skip to step 5.\n"+
	"5) Play the post-action idle animation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle until the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n"+
	"6) Fire the OnEndSequence output.\n"+
	"7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\n"+
	"The MoveToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is received.\n\n"+
	"If the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag."
[
	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 0
		8 : "Leave Corpse" : 0
		16 : "Start on Spawn" : 0
		32: "No Interruptions" : 0
		64: "Override AI" : 0
		128: "Don't Teleport NPC On End" : 0
		256: "Loop in Post Idle" : 0
		512: "Priority Script" : 0
		4096: "Allow actor death" : 0
	]

	
	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
]


@PointClass base(Targetname) sphere(m_flRadius) color(255 0 255) iconsprite("editor/aiscripted_schedule") = aiscripted_schedule :
	"Issues a command to an NPC without taking the NPC out of its AI. This does not seize control of the NPC as " +
	"a scripted_sequence does" 
[
	m_iszEntity(target_destination) : "Target NPC" : : "The name or classname of an NPC to use."
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	graball(choices)  : "All in radius" : 0: "Whether to grab all matching NPCs in the specified radius, instead of just one"  =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 1
		1024 : "Search Cyclically" : 0
		2048 : "Don't Complain" : 0
	]

	forcestate(choices) : "AI state to set" : 0 =
	[
		0 : "<None>"
		1 : "Set state to IDLE"
		2 : "Set state to ALERT"
		3 : "Set state to COMBAT"
	]
		
	schedule(choices) : "Schedule to run" : 1 =
	[
		0 : "<None>"
		1 : "Walk to Goal Entity"
		2 : "Run to Goal Entity"
		3 : "Set enemy to Goal Entity"
		4 : "Walk Goal Path"
		5 : "Run Goal Path"
		6 : "Set enemy to Goal Entity AND Run to Goal Entity"
	]
	
	interruptability(choices) : "Interruptability" : 0 =
	[
		0 : "General"
		1 : "Damage or Death"
		2 : "Death"
	]

	goalent(target_destination) : "Goal entity" : : "Provides the name of a schedule-specific goal entity (see 'Schedule to run')"

	// Inputs
	input StartSchedule(void) : ""
		
	input StopSchedule(void) : ""
	
	output OnScheduleFailed(void) : "Fired if schedule failed for any reason"
	output OnScheduleFailedMovement(void) : "Fired if schedule failed because the actor cannot reach the goal entity. ONLY determined when the schedule starts, NOT when the NPC is already moving."
	output OnScheduleFailedNoNPC(void) : "Fired if schedule failed because the actor cannot be found"
	output OnScheduleFailedNoTarget(void) : "Fired if schedule failed because the goal entity cannot be found"
]

@PointClass base(Targetname) = ai_citizen_response_system :
	"If placed in the level, will manage citizens responses to player's actions."
[
	// Inputs
	input ResponseVitalNPC(void) : "Fire the VitalNPC Died response."
]

//-------------------------------------------------------------------------
//
// Solid Entities
//
//-------------------------------------------------------------------------

@SolidClass base(EnableDisable, Parentname, Origin, Global) = func_healthcharger: "Wall health recharger" 
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	// Outputs
	output OutRemainingHealth(float) : "Remaining Health."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

@SolidClass base(Targetname, Parentname, Origin) = func_recharge: "Battery recharger" 
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	spawnflags(flags) =
	[
		8192  : "Citadel recharger" : 0
	]

	// Inputs
	input Recharge(void) : "Recharge to full"
	input SetCharge(void) : "This sets the remaining charge in the charger to whatever value you specify"

	// Outputs
	output OutRemainingCharge(float) : "Remaining Charge."
	output OnHalfEmpty(void) : "Half-Empty"
	output OnEmpty(void) : "Empty"
	output OnFull(void) : "Recharged to full."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

@SolidClass base(Parentname, Targetname, Global) = func_vehicleclip: "Vehicle Clip" 
[
	input Kill( void ) : "Removes this entity from the world"
	input Enable( void ) : "Enable collisions with vehicles"
	input Disable( void ) : "Disable collisions with vehicles"
]

@SolidClass base(func_movelinear) = func_lookdoor : "A door that moves either when looked by a targeted object or when " +
	"a target object comes near the door.  Behavior can be either based on viewing direction or proximity " +
	"alone, or on a combination of both.  If inverted the doors behavior will be the opposite." 
[
	spawnflags(flags) =
	[
		8192  : "LookDoor Threshold" : 0
		16384 : "LookDoor Invert" : 0
		32768 : "LookDoor From Open" : 0
	]

	ProximityDistance(string) : "Proximity Distance" : "0.0"  : "If non-zero, proximity range over which door will move"
	ProximityOffset(string) : "Proximity Offset" : "0.0" : "Offset from the target object"
	FieldOfView(string) : "FieldOfView" : "0.0"  : "If non-zero, field of view over which door will move"

	// Input
	input InvertOn(void) : "InvertOn - when set behavior of door is inverted."
	input InvertOff(void) : "InvertOff - when set behavior of door is normal."
]

@SolidClass base(Trigger) = trigger_waterydeath: 
	"A trigger volume that spawns leeches around entities inside it, and does damage to them until they die. "+
	"Used to prevent players entering deep water."
[
	deathtype(choices) : "Death Mechanic" : 0 : "How should it kill the player" =
	[
		0 : "Retail (leeches)"
		1 : "2003 (icky)"
	]
]

//-------------------------------------------------------------------------
//
// Point Entities
//
//-------------------------------------------------------------------------

@PointClass base(EnvGlobal) iconsprite("editor/global") = env_global : 
	"An entity to control a game-specific global states."
[
	globalstate(choices) : "Global State to Set" =
	[
		"gordon_precriminal" : "Gordon pre-criminal" 
		"player_evil"	: 	"Gordon is evil (killed civilians)"
		"antlion_allied" : "Antlions are player allies" 
//		"player_stealth" : "Player in APC is disguised as combine" 
		"suit_no_sprint" : "Suit sprint function not yet enabled" 
		"super_phys_gun" : "Super phys gun is enabled" 
		"friendly_encounter" : "Friendly encounter sequence (lower weapons, etc.)"
//		"citizens_passive" : "Citizens are *not* player allies (cannot be commanded)"
		"gordon_invulnerable" : "Gordon is invulnerable"
		"no_seagulls_on_jeep" : "Don't spawn seagulls on the jeep"
		"ep2_alyx_injured" : "Episode 2: Alyx injured"
		"ep_alyx_darknessmode" : "Episodic: Alyx darkness mode"
		"hunters_to_run_over" : "Ep2 Counter: Hunters to run over before they dodge"
		"playing_arcade" : "Gordon is inside Manhack Arcade virtual reality"
		"rain_cheap" : "Constrain rain effects to precip brushes"
		"no_suit_updates" : "HEV Suit is de-powered and does not speak status updates"
	]
]

//-------------------------------------------------------------------------
//
// Tanks
//
//-------------------------------------------------------------------------
@BaseClass base(Targetname, Parentname, Origin, Angles, RenderFields, Global, Shadow) = BaseTank
[
	spawnflags(flags) =
	[
		1 : "Active" : 0
		16: "Only Direct" : 0
		32: "Controllable" : 0
		64: "Damage Kick" : 0
	      1024: "NPC Controllable" : 0
              2048: "NPC Set Controller" : 0
	      4096: "Allow friendlies to hit player" : 0
	     32768: "Non-solid." : 0
	    131072: "Perfect accuracy every 3rd shot at player" : 0
	]

	control_volume(target_destination) : "Control Volume" : "" : "Name of a trigger the specifies the volume in which a player must be to control this tank."

	// Mainly for use with 1009 team settings (game_team_master)
	master(string) : "(Team) Master" 

	yawrate(string) : "Yaw rate" : "30"
	yawrange(string) : "Yaw range" : "180"
	yawtolerance(string) : "Yaw tolerance" : "15"
	pitchrate(string) : "Pitch rate" : "0"
	pitchrange(string) : "Pitch range" : "0"
	pitchtolerance(string) : "Pitch tolerance" : "5"
	barrel(string) : "Barrel Length" : "0"
	barrely(string) : "Barrel Horizontal" : "0"
	barrelz(string) : "Barrel Vertical" : "0"
	spritesmoke(sprite) : "Smoke Sprite" : ""
	spriteflash(sprite) : "Flash Sprite" : ""
	spritescale(string) : "Sprite scale" : "1"
	rotatestartsound(sound) : "Rotate Start Sound" : ""
	rotatesound(sound) : "Rotate Loop Sound" : ""
	rotatestopsound(sound) : "Rotate Stop Sound" : ""
	firerate(string) : "Rate of Fire" : "1"
	bullet_damage(string) : "Damage Per Bullet" : "0" : "If set to 0, it'll use the base weapon bullet's damage."
	bullet_damage_vs_player(string) : "Damage Per Bullet Vs Player" : "0" : "If set to 0, it'll use the Damage Per Bullet value."
	persistence(string) : "Firing persistence" : "1" : "(Seconds) How long to keep firing at last known position after lose sight of target"
	persistence2(string) : "Firing persistence2" : "0" : "(Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position"
	firespread(choices) : "Bullet accuracy" : 0 =
	[
		0: "Perfect Shot"
		1: "Small cone"
		2: "Medium cone"
		3: "Large cone"
		4: "Extra-large cone"
	]
	minRange(string) : "Minmum target range" : "0"
	maxRange(string) : "Maximum target range" : "0"
	_minlight(string) : "Minimum light level"

	gun_base_attach(string) : "Gun Base Attachment" : "" : "If Parent is specified, this is the attachment point on the parent to aim from."
	gun_barrel_attach(string) : "Gun Barrel Attachment" : "" : "If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too."
	gun_yaw_pose_param(string) : "Gun Yaw Pose Param" : "" : "If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters."
	gun_yaw_pose_center(float) : "Gun Yaw Pose Center" : "0" : "The center yaw pose parameter of the gun on the parent"
	gun_pitch_pose_param(string) : "Gun Pitch Pose Param" : "" : "If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters."
	gun_pitch_pose_center(float) : "Gun Pitch Pose Center" : "0" : "The center pitch pose parameter of the gun on the parent"

	ammo_count(integer) : "Ammunition Count" : -1 : "Only applies to player use. -1 = unlimited ammo."

	LeadTarget(choices) : "Lead Target" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	npc_man_point(target_destination) : "NPC Man Point" : "" : "Point where NPC must stand to man this func_tank."
	playergraceperiod(float) : "Post-NPC Attack Grace Period" : "0" : "If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time."
	ignoregraceupto(float) : "Ignore Grace Upto" : "768" : "The player grace period is ignored if the player's under this distance from the func_tank."
	playerlocktimebeforefire(float) : "Player Lock Time" : "0" : "The tank must have the player as a target for this amount of time before it's allowed to fire."

	effecthandling(choices) : "Effect Handling" : 0 =
	[
		0 : "Use Individual Settings."
		1 : "AR2"
		2 : "Combine Cannon"
	]

	// Inputs
	input Activate(void) : "Turn the tank on"
	input Deactivate(void) : "Turn the tank off (go dormant)"
	input SetFireRate(string) : "How fast to fire (0 = don't fire)"
	input SetDamage(string) : "Set the Damage Per Bullet"
	input SetTargetPosition(string) : "World position that I should aim at"
	input SetTargetDir(vector) : "Direction to aim at."
	input SetTargetEntityName(string) : "Name of entity I should follow/attack"
	input SetTargetEntity(string) : "Entity I should follow/attack (output from other entity only)"
	input ClearTargetEntity(void) : "Clear the entity I should be attacking."
	input FindNPCToManTank(string) : "Find a nearby NPC to man this func_tank."
	input StartFindingNPCs(void) : "Start searching for NPCs to man this func_tank."
	input StopFindingNPCs(void) : "Stop searching for NPCs to man this func_tank."
	input ForceNPCOff(void) : "Force the NPC manning this func_tank (if any) to leave."
	input SetMaxRange(float) : "Set the max range of the func_tank."

	// Outputs
	output OnFire(void) : "Fires when the tank fires its bullets"
	output OnAquireTarget(void) : "Fires when target is newly in range and can be shot"
	output OnLoseTarget(void) : "Fires when when target goes out of range"
	output OnAmmoDepleted(void) : "Fires when tank runs out of ammo"
	output OnGotController(void) : "Fires when an NPC starts to control this tank. Players do NOT fire this input."
	output OnLostController(void) : "Fires when the NPC controller of the tank stops controlling it. Players do NOT fire this input."
	output OnGotPlayerController(void) : "Fires when a Player starts to control this tank. NPCs do NOT fire this input."
	output OnLostPlayerController(void) : "Fires when the Player controller of the tank stops controlling it. NPCs do NOT fire this input."
	output OnReadyToFire(void) : "Fires once when the tank is done waiting to fire between rounds"
]


// dvs: FIXME: put this back once we have an episodic FGD
//@SolidClass base(BaseTank) = func_tank : "Brush Gun Turret" 
//[
//	bullet(choices) : "Bullets" : 0 = 
//	[
//		0: "None"
//		1: "Pistol"
//		2: "SMG1"
//		3: "AR2"
//		4: "Laser"
//	]
//
//	spawnflags(flags) =
//	[
//		8192: "Ignore range when making viewcone checks" : 0
//		256 : "Aiming Assistance (Player Only)" : 0
//	]
//]


// dvs: FIXME: move into an episodic FGD
@SolidClass base(BaseTank) = func_tank : "Brush Gun Turret" 
[
	ammotype(choices) : "Ammo type" : "" = 
	[
		"" : "None"
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"AR2" : "AR2"
		"CombineHeavyCannon" : "Combine Heavy Cannon"
	]

	spawnflags(flags) =
	[
		8192: "Ignore range when making viewcone checks" : 0
		256 : "Aiming Assistance (Player Only)" : 0
	]
]


@SolidClass base(BaseTank) = func_tankpulselaser : "Brush Pulse Laser" 
[
	PulseSpeed(float) : "Pulse Speed" : 1000 : "How fast does pulse travel"
	PulseColor(color255) : "Pulse Color" : "255 0 0" : "Color of the pulse"
	PulseWidth(float) : "Pulse Width" : "20" : "Width of the pulse"
	PulseLife(float) : "Pulse Life" : 2 : "(Seconds)  How long the pulse lasts"
	PulseLag(float) : "Pulse Lag" : "0.05" : "(Seconds)  How far behind is pulse tail"
	PulseFireSound(sound)   : "Pulse Fire Sound" : "" : "Sound played when pulse fires"
]


@SolidClass base(BaseTank) = func_tanklaser : "Brush Laser Turret" 
[
	laserentity(target_destination) : "env_laser Entity"
]


@SolidClass base(BaseTank) = func_tankrocket : "Brush Rocket Turret"
[
	rocketspeed(float) : "Projectile speed" : 800 : "Speed the rocket will travel at."
]

@SolidClass base(BaseTank) = func_tankairboatgun : "Airboat Gun Turret"
[
	airboat_gun_model(target_destination) : "Name of a prop_dynamic which is the airboat gun model"
]

@SolidClass base(BaseTank) = func_tankapcrocket : "APC Rocket Turret"
[
	rocketspeed(float) : "Projectile speed" : 800 : "Speed the rocket will travel at."
	burstcount(integer) : "Burst shot count" : 10 : "Number of missiles to shoot in a burst"

	input DeathVolley(void) : "Fire a burst of rockets cause we're dying."
]


@SolidClass base(BaseTank) = func_tankmortar : "Brush Mortar Turret" 
[
	iMagnitude(Integer) : "Explosion Magnitude" : 100
	firedelay(string) : "Shell travel time" : 2 : "How long after the turret fires before the shell impacts"
	firestartsound(sound) : "Firing start sound" : "" : "Sound of the mortar firing"
	fireendsound(sound) : "Firing end sound" : "" 
	incomingsound(sound) : "Incoming Shell Sound" : "" : "Sound of the shell falling on the target"
	warningtime(float) : "Incoming warning time" : "1" : "How long before the shell impacts to play the warning sound"
	firevariance(float) : "Fire time variance" : "0" : "How much variability to add to fire rate (time +-)"

	input FireAtWill(void) : "Allow tank to fire next shot as soon as ready."
]

@SolidClass base(BaseTank) = func_tankphyscannister : "PhysCannister Turret"
[
	barrel_volume(target_destination) : "Barrel Volume" : "" : "Name of a trigger the specifies the volume in which cannisters must be placed."
]

@SolidClass base(BaseTank) = func_tank_combine_cannon : "Combine sentry cannon"
[
	ammotype(choices) : "Ammo type" : "" = 
	[
		"" : "None"
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"AR2" : "AR2"
		"CombineHeavyCannon" : "Combine Heavy Cannon"
	]

	input DisableHarrass(void) : "Disable the cannon tracking an unseen player" 
	input EnableHarrass(void) : "Allow the cannon to track and pester a player who is hiding (DEFAULT)"

	output OnShotAtPlayer(void) : "Fired everytime the cannon shoots at the player"
]


//-------------------------------------------------------------------------
//
// Items
//
//-------------------------------------------------------------------------
@BaseClass color(0 0 200) base(Targetname, Angles, RenderFields, BaseFadeProp, Global, Shadow) sphere(fademindist) sphere(fademaxdist) = Item
[
	output OnPlayerTouch(void) : "Fires when the player touches this object"

	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this item. Fires on: Player Touch (whether or not player actually acquires the item), Picked up by +USE, Picked up by Physcannon, Punted by Physcannon."
	
	spawnflags(Flags) =
	[
		1 : "Start Constrained" : 0
	]
]

@PointClass base(Item) studio("models/items/healthkit.mdl") = item_dynamic_resupply : "A dynamic item. When the player enters the PVS of this entity, " +
    "it will determine the item most needed by the player, spawn one of those items, and remove itself. To determine which item the player most needs, it " +
    "calculates which of the Desired Health/Armor/Ammo ratios the player is farthest from.\n\nIf the player is above all the desired levels, then no item " +
    "will be spawned, unless this item_dynamic_resupply was created by an item_item_crate. In that case, a random piece of ammo used by a weapon, that " +
    "the player has, will be spawned. If the 'Fallback to Health Vial' spawnflag is set, a health vial will be spawned instead of the ammo.\n\nBy default, " +
    "the item_dynamic_resupply uses the values inside the Master resupply, instead of using it's own values. This makes it easy to tweak the desired " +
    "loadout of many resupplies. The BecomeMaster input allows you to switch Masters dynamically as the level progresses."
[
	spawnflags(Flags) =
	[
		1 : "Use Master's values" : 1
		2 : "Is Master" : 0
		8 : "Fallback to Health Vial" : 0
		16 : "Alternate master" : 0
	]

	DesiredHealth(float) : "Desired Health Ratio" : "1" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max health."
	DesiredArmor(float) : "Desired Armor Ratio" : "0.3" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max armor."
	DesiredAmmoPistol(float) : "Desired Pistol Ammo Ratio" : "0.5" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoSMG1(float) : "Desired SMG1 Ammo Ratio" : "0.5" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoSMG1_Grenade(float) : "Desired SMG1 Grenade Ammo Ratio" : "0.1" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoAR2(float) : "Desired AR2 Ammo Ratio" : "0.4" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoBuckshot(float) : "Desired Shotgun Ammo Ratio" : "0.5" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoRPG_Round(float) : "Desired RPG Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoGrenade(float) : "Desired Grenade Ammo Ratio" : "0.1" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmo357(float) : "Desired 357 Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoCrossbow(float) : "Desired Crossbow Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoAR2_AltFire(float) : "Desired AR2 Alt-fire Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."

	// Inputs
	input CalculateType(void) : "Force the dynamic resupply to calculate which item it should spawn."
	input BecomeMaster(void) : "Make this resupply the master resupply. All other resupplies set to Use Master's Values will now use this resupply's values."
]
@PointClass base(Item) studio("models/Items/hevsuit.mdl") = item_suit : "HEV Suit" 
[
	spawnflags(Flags) =
	[
		1 : "Short Logon" : 0
	]
]

@PointClass base(Targetname, Angles, BaseFadeProp, RenderFields, Global, Shadow) studio("models/items/ammocrate_rockets.mdl") = item_ammo_crate : "Ammo Crate"
[
	AmmoType(choices) : "Ammo Type" : 0 =
	[
		0 : "Pistol"
		1 : "SMG1"
		2 : "AR2"
		3 : "RPG Rounds"
		4 : "Buckshot"
		5 : "Grenades"
		6 : "357"
		7 : "XBowBolt"
		8 : "AR2 Alt-Fire Round"
		9 : "SMG Alt-Fire grenade"
		10 : "2003 Bullets crate"
		11 : "2003 Missiles crate"
	]

	// Inputs
	input Kill(void) : "Remove the ammo crate"
	output OnUsed(void) : "Fires when +used by the player."
]

@PointClass base(BasePropPhysics, Targetname, Angles, DamageFilter, BaseFadeProp, RenderFields, Global, Shadow) studio("models/items/item_item_crate.mdl") = item_item_crate : "Item Crate"
[
	CrateType(choices) : "Crate Contains" : 0 =
	[
		0 : "Contains specified item"
	]


	CrateAppearance(choices) : "Crate Appearance" : 0 =
	[
		0 : "Default Appearance"
		1 : "Radar Beacon Crate"
	]

	ItemClass(pointentityclass) : "Item Type" : "item_dynamic_resupply" : "Class name of the entity to spawn when the crate is broken"
	ItemCount(integer) : "Item Count" : 1 : "Number of items to emit upon breakage"
	SpecificResupply(target_destination) : "Specific resupply" : "" : "If item type is item_dynamic_resupply, specify a specific one to use instead of the master"

	// Inputs
	input Kill(void) : "Remove the item crate"
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	
	// Outputs
	output OnBreak(void) : "Fires when broken."
	output OnHealthChanged(float) : "Fires when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."

	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this crate. Fires on: Picked up by +USE, Picked up by Physcannon, Punted by Physcannon, Broken."
]

@PointClass base( Targetname, Angles, BaseFadeProp, RenderFields, Global, Shadow) studio( "models/props_combine/health_charger001.mdl" ) = item_healthcharger : "Health Charger"
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	// Outputs
	output OutRemainingHealth(float) : "Remaining Health."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

@PointClass base( Targetname, Angles, BaseFadeProp, RenderFields, Global, Shadow) studio( "models/props_combine/suit_charger001.mdl" ) = item_suitcharger : "Battery recharger"
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	spawnflags(flags) =
	[
		8192  : "Citadel recharger" : 0
		16384 : "Kleiner's recharger" : 0
	]

	// Inputs
	input Recharge(void) : "Recharge to full"

	// Outputs
	output OutRemainingCharge(float) : "Remaining Charge."
	output OnHalfEmpty(void) : "Half-Empty"
	output OnEmpty(void) : "Empty"
	output OnFull(void) : "Recharged to full."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

//-------------------------------------------------------------------------
//
// Weapons
//
//-------------------------------------------------------------------------
@BaseClass color(0 0 200) base(Targetname, Angles, RenderFields, Global, Shadow) sphere(fademindist) sphere(fademaxdist) = Weapon
[
	spawnflags(Flags) =
	[
		1 : "Start constrained" : 0
		2 : "Deny player pickup (reserve for NPC)" : 0
		4 : "Not puntable by Gravity Gun" : 0
	]

	output OnPlayerUse(void) : "Fires when the player +uses this weapon"
	output OnPlayerPickup(void) : "Fires when the player picks up this weapon"
	output OnNPCPickup(void) : "Fires when an NPC picks up this weapon"
	output OnCacheInteraction(void) : "Fires when the player 'proves' they've found this weapon. Fires on: Player Touch, +USE pickup, Physcannon pickup, Physcannon punt."

	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified." +
												 " This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades." +
]

@PointClass base(Weapon) studio("models/weapons/w_crowbar.mdl") = weapon_crowbar : "Crowbar" []
@PointClass base(Weapon) studio("models/weapons/w_stunbaton.mdl") = weapon_stunstick : "StunStick" []
@PointClass base(Weapon) studio("models/weapons/w_pistol.mdl") = weapon_pistol : "Pistol" []
@PointClass base(Weapon) studio("models/weapons/w_irifle.mdl") = weapon_ar2 : "Assault Rifle 2" []
@PointClass base(Weapon) studio("models/weapons/w_rocket_launcher.mdl") = weapon_rpg : "Missile Launcher" []
@PointClass base(Weapon) studio("models/weapons/w_smg1.mdl") = weapon_smg1 : "SMG1" []
@PointClass base(Weapon) studio("models/weapons/w_357.mdl") = weapon_357 : "357" []
@PointClass base(Weapon) studio("models/weapons/w_crossbow.mdl") = weapon_crossbow : "Crossbow" []
@PointClass base(Weapon) studio("models/weapons/w_shotgun.mdl") = weapon_shotgun : "Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_grenade.mdl") = weapon_frag : "Frag Grenade" []
@PointClass base(Weapon) studio("models/weapons/w_physics.mdl") = weapon_physcannon : "Physics Cannon" []
@PointClass base(Weapon) studio("models/weapons/w_bugbait.mdl") = weapon_bugbait: "Bug bait" []
@PointClass base(Weapon) studio("models/weapons/W_Alyx_Gun.mdl") = weapon_alyxgun: "Alyx Gun" []
@PointClass base(Weapon) studio("models/weapons/W_annabelle.mdl") = weapon_annabelle: "Annabelle (Grigori)" []

//2003
@PointClass base(Weapon) studio("models/weapons/w_pistol.mdl") = weapon_pistol_old : "Pistol (2003)" []
@PointClass base(Weapon) studio("models/weapons/w_smg1.mdl") = weapon_smg1_old : "SMG1 (2003)" []
@PointClass base(Weapon) studio("models/2003/weapons/w_ar2.mdl") = weapon_ar2_old : "AR2 (2003)" []
@PointClass base(Weapon) studio("models/weapons/w_shotgun.mdl") = weapon_shotgun_old : "Shotgun (2003)" []
@PointClass base(Weapon) studio("models/weapons/w_bugbait.mdl") = weapon_bugbait_old: "Bug bait (2003)" []

@SolidClass base(Trigger) = trigger_rpgfire :
	"A volumetric trigger that triggers whenever an RPG is fired within it."
[
	// Outputs
	output OnTrigger(void) : "Fires while the trigger is activated"
]

@SolidClass base(Trigger) = trigger_vphysics_motion :
	"A volumetric trigger that affects the motion of vphysics objects that touch it."
[
	spawnflags(Flags) =
	[
		4096 : "Can move (through hierarchical attachment)" : 0
	]

	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	
	SetGravityScale(float) : "Scale gravity of objects in the field." : "1.0"
	input SetGravityScale(float) : "Scale gravity of objects in the field."

	SetAdditionalAirDensity(float) : "Additional air density for drag" : "0"
	input SetAdditionalAirDensity(float) : "Additional air density for drag"

	SetVelocityLimit(float) : "Max velocity in field (0 disables)" : "0.0"
	input SetVelocityLimit(float) : "Max velocity in field."

	SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second when it exceeds the velocity limit (0 disables)" : "0.0"
	input SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second"

	input SetVelocityLimitTime(string) : "Accepts two arguments: the first is the new velocity limit, the second is the time it takes to ramp to that value"

	SetVelocityScale(float) : "Velocity scale/drag" : "1.0"
	input SetVelocityScale(float) : "Velocity scale/drag"

	SetAngVelocityLimit(float) : "Max angular velocity in field (degrees/s, 0 disables)" : "0.0"
	input SetAngVelocityLimit(float) : "Max angular velocity in field."

	SetAngVelocityScale(float) : "Angular Velocity scale/drag" : "1.0"
	input SetAngVelocityScale(float) : "Angular Velocity scale/drag"

	SetLinearForce(float) : "Linear force (0 disables)" : "0.0"
	input SetLinearForce(float) : "Linear force (0 disables)"

	SetLinearForceAngles(angle) : "Direction of linear force (Pitch Yaw Roll (Y Z X))" : "0 0 0"
//	input SetLinearForceAngles(angle) : "Direction of linear force (Pitch Yaw Roll (Y Z X))"

	ParticleTrailMaterial(string) : "Particle Trail Material" : : "Name of a material to use for the particle trail, no name means no particle trail"
	ParticleTrailLifetime(float) : "Particle Trail Lifetime" : 4 : "Lifetime of the particles to emit"
	ParticleTrailStartSize(float) : "Particle Trail Starting Sprite Size" : 2 : "Starting size of the sprite to emit"
	ParticleTrailEndSize(float) : "Particle Trail Ending Sprite Size" : 3 : "Ending size of the sprite to emit"

	// Inputs
	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
	input	Toggle(void) : "Toggle enable/disable."
]

@PointClass base(Targetname) size( 16 16 16) sphere() color( 255 255 0 ) = point_bugbait : "Bugbait sensor point"
[
	Enabled(choices) : "Start Enabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		1: "Do not call antlions to position" : 0
		2: "Don't activate on thrown bugbait splashes" : 0
		4: "Don't activate on squeezed bugbait" : 0
	]

	radius(integer) : "Sensor Radius" : 512

	// Inputs
	input	Enable(void) : "Enable the sensor."
	input	Disable(void): "Disable the sensor."
	input	Toggle(void) : "Toggle the sensor."

	// Outputs
	output OnBaited(void) : "Fires when bugbait lands within a radius of the sensor"
]

@PointClass base(Weapon) = weapon_brickbat : "Brickbat"
[
	BrickbatType(choices) : "BrickbatType" : "Rock" =
	[
		0 : "Rock"
		1 : "Beer Bottle"
		2 : "Headcrab"
		3 : "Cremator Head"
	]
]


@PointClass base(Targetname, Angles) size(16 16 16) line(255 255 255, targetname, target) color(247 181 82) = path_corner : "Generic path point"
[
	spawnflags(Flags) =
	[
		1: "Wait for retrigger" : 0
		2: "Teleport to THIS path_corner" : 0
	]
	target(target_destination) : "Next stop target"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0

	// Inputs 
	input SetNextPathCorner(string) : "Sets next pathcorner"

	// Outputs
	output OnPass(void) : "Fires when a path follower passes this point"
]

@PointClass base(Targetname) size(16 16 16) color(255 0 0) = path_corner_crash : "Helicopter Crash Path"
[
	target(target_destination) : "Next stop target"
]


//-------------------------------------------------------------------------
//
// Player effects
//
//-------------------------------------------------------------------------

@PointClass base(Targetname) size(-2 -2 -2, 2 2 2) = player_loadsaved : "Load Auto-Saved game" 
[
	duration(string) : "Fade Duration (seconds)" : "2"
	holdtime(string) : "Hold Fade (seconds)" : "0"
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
	loadtime(string) : "Reload delay" : "0"

	// Inputs
	input Reload(void) : "Ends this game and reloads"
]


@PointClass base(Targetname) size(-2 -2 -2, 2 2 2) = player_weaponstrip : "Strips player's weapons"
[
	// Inputs
	input Strip(void) : "Strip player's weapons"
	input StripWeaponsAndSuit(void) : "Strip player's weapons and his suit"
]

@PointClass base(Targetname) size(-2 -2 -2, 2 2 2) = player_speedmod: "Speeds up or slows down player velocity over time (slow mo/fast forward)"
[
	spawnflags(Flags) =
	[
		1: "Suppress weapons" : 0
		2: "Suppress HUD" : 0
		4: "Suppress jump" : 0
		8: "Suppress duck" : 0
		16: "Suppress use" : 0
		32: "Suppress sprint" : 0
		64: "Suppress attack" : 0
		128: "Suppress zoom" : 0
	]

	// Inputs
	input ModifySpeed(float) : "Modifies player speed by X ammount."
]



//-------------------------------------------------------------------------
//
// Logic Entities
//
//-------------------------------------------------------------------------
@PointClass color(0 0 255) base(Targetname) iconsprite("editor/choreo_scene.vmt") = logic_choreographed_scene :
	"Manages a choreographed scene of one or more actors."

[
	// Keys
	SceneFile(scene) : "Scene file"

	// Links
	target1(target_destination) : "Target 1"
	target2(target_destination) : "Target 2"
	target3(target_destination) : "Target 3"
	target4(target_destination) : "Target 4"
	target5(target_destination) : "Target 5"
	target6(target_destination) : "Target 6"
	target7(target_destination) : "Target 7"
	target8(target_destination) : "Target 8"

	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this scene needs is already talking when this scene is told to start." =
	[
		0: "Start immediately"
		1: "Wait for actor to finish"
		2: "Interrupt at next interrupt event"
		3: "Cancel at next interrupt event"
	]

	// Inputs
	input Start(void) : "Starts playback of the scene file"
	input Pause(void) : "Pauses playback of the scene file"
	input Resume(void) : "Resumes playback of the scene if it has been paused"
	input Cancel(void) : "Cancels playback of the scene"
	input CancelAtNextInterrupt(void) : "Cancels playback of the scene at the next interrupt event in the scene."
	input PitchShift(float) : "Multiplies the the pitch"

	input InterjectResponse(string) : "Finds an actor who can respond to the specified concept string while the scene continues playing"

	input StopWaitingForActor(void) : "Stop waiting on an actor to stop talking."

	// Outputs
	output OnStart(void) : "The scene has started"
	output OnCompletion(void) : "The scene has completed"
	output OnCanceled(void) : "The scene has been canceled"
	output OnTrigger1(void) : "Scene trigger 1"
	output OnTrigger2(void) : "Scene trigger 2"
	output OnTrigger3(void) : "Scene trigger 3"
	output OnTrigger4(void) : "Scene trigger 4"
	output OnTrigger5(void) : "Scene trigger 5"
	output OnTrigger6(void) : "Scene trigger 6"
	output OnTrigger7(void) : "Scene trigger 7"
	output OnTrigger8(void) : "Scene trigger 8"
	output OnTrigger9(void) : "Scene trigger 9"
	output OnTrigger10(void) : "Scene trigger 10"
	output OnTrigger11(void) : "Scene trigger 11"
	output OnTrigger12(void) : "Scene trigger 12"
	output OnTrigger13(void) : "Scene trigger 13"
	output OnTrigger14(void) : "Scene trigger 14"
	output OnTrigger15(void) : "Scene trigger 15"
	output OnTrigger16(void) : "Scene trigger 16"

	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
]

@PointClass color(0 0 255) base(Targetname) iconsprite("editor/choreo_manager.vmt") = logic_scene_list_manager :
	"Manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inputs. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_list_manager can be entered in a slot instead of an invididual scene, which will cause all scenes in that manager to be removed when a later scene in this list is played."
[
	scene0(target_destination) : "Scene 1" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene1(target_destination) : "Scene 2" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene2(target_destination) : "Scene 3" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene3(target_destination) : "Scene 4" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene4(target_destination) : "Scene 5" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene5(target_destination) : "Scene 6" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene6(target_destination) : "Scene 7" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene7(target_destination) : "Scene 8" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene8(target_destination) : "Scene 9" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene9(target_destination) : "Scene 10" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene10(target_destination) : "Scene 11" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene11(target_destination) : "Scene 12" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene12(target_destination) : "Scene 13" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene13(target_destination) : "Scene 14" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene14(target_destination) : "Scene 15" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene15(target_destination) : "Scene 16" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."

	// Inputs
	input Shutdown(void) : "Remove the manager and all scenes referenced by it (and all scenes referenced by logic_scene_list_manager's embedded in this one)."
]

@PointClass base(Targetname, Parentname) sphere(volume) iconsprite("editor/ai_sound.vmt") = ai_sound :
	"This entity makes sounds or smells that can be sensed by NPCs, butnot by the player. This can be used " +
	"to cause reactions in nearby NPCs.\n\n" +
	"Sound Types\n" +
	"  Combat: Will cause most NPCs to become alert\n" +
	"  World: Will cause most NPCs to become alert\n" +
	"  Danger: Will cause most NPCs to move away from the position of the sound\n" +
	"  Bullet Impact: \n" +
	"  Carcass: \n" +
	"  Meat: \n" +
	"  Garbage: \n" +
	"  Thumper: causes antlions to run away briefly\n" +
	"  Readiness: (Low, Medium, High) Causes player companions that can hear this sound to change readiness\n"
[
	//input InsertSound(Integer) : "THIS IS NOW OBSOLETE. Use InsertAISound"
	input EmitAISound(void) : "Make the sound."

	volume(integer) : "Volume" : 120 : "How far away this sound can be heard. This is a radius."
	duration(float) : "Duration" : "0.5" : "How long the sound persists each time you insert it."

	soundtype(choices) : "Sound Type" : 0 : "The type of sound or smell will determine the reaction of NPCs that sense it." =
	[
		0: "Select one"
		1: "Combat"
		2: "World"
		//4: "Player (Don't use)"
		8: "Danger"
		16: "Bullet Impact"
		32: "Carcass"
		64: "Meat"
		128: "Garbage"
		256: "Thumper"
		4096: "Move Away - Most NPCs will clear the radius of this sound when heard."
		16384 : "Readiness - Low"
		32768 : "Readiness - Medium"
		65536 : "Readiness - High"
	]

	soundcontext(choices) : "Additional sound context (optional)" : 0 : "Optional settings specifying such things as who can or cannot hear the sound." =
	[
		0 : "Select one"
		8388608 : "Only Combine hear"
		67108864 : "Combine cannot hear"
	]

	locationproxy(target_destination) : "Location Proxy" : "" : "The name of an entity to use as a proxy to determine the location at which to make the sound. If you specify an entity here, the sound will be made at that entity's location (!player included)" 
]


@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) = env_rotorwash : "Rotorwash Effect"
[
	spawnflags(Flags) =
	[
		1 : "Ignore solid" : 0
	]

	input DoEffect(Void) : "Make a rotor puff"
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname, Angles) studio() = combine_mine : "Combine Land Mine"
[
	model(studio) : "World model" : "models/props_combine/combine_mine01.mdl"
	
	WarnRadius(float) : "Warn Radius" : 90 : "How close an NPC must be to receive a warning."
	DetonateRadius(float) : "Detonate Radius" : 65 : "How close an NPC must be to set this off."

	ExplosionRadius(float) : "Radius of explosion" : 125
	ExplosionDamage(float) : "Damage of explosion" : 150
	ExplosionDelay(string) : "Delay before explosion" : "0.2"
	Health(integer) : "Health" : 10
	
	behavior(choices) : "Behavior" : 0 : "Which gameplay behavior this should have" =
	[
		0 : "Retail"
		1 : "2003"
	]
	
	bounce(choices) : "Bounce" : 1 : "Whether the mine should bounce up in the air before exploding." =
	[
		0: "No"
		1: "Yes"
	]

	LockSilently(choices) : "Lock Silently" : 1 : "If yes, mine plays no sound when clamps close" =
	[
		0: "No"
		1: "Yes"
	]

	StartDisarmed(choices) : "Start Disarmed" : 0 : "If yes, mine begins dormant." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	Modification(choices): "Citizen modified" : 0 : "'Normal' is default Combine behavior. 'Cavern' detonates earlier in its jump, and has a different default skin." = 
	[
		0 : "Normal"
		1 : "Cavern"
	]

	// Inputs
	input Disarm(void) : "Disarm this mine (open hooks and shut off) if not placed by player."

	// Outputs
	output OnPulledUp(void) : "Fires when this mine is uprooted with physgun"
	output OnExplode(void) : "Fires when this mine explodes"
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) = env_ar2explosion :
	"AR2 explosion visual effect. Big, volume-filling brown cloud. Does not cause damage or emit sound."
[
	input Explode(Void) : "Make the explosion effect."
	material(material) : "Particle Material" : "particle/particle_noisesphere" : "The material to use for each particle in the explosion."
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname) = env_starfield : "Starfield effect" 
[
	input TurnOn(void) : "Turn on"
	input TurnOff(void) : "Turn off"
	input SetDensity(float) : "Set the density of the starfield. It's a multiplier, so 1 is the default."
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname, Angles) = env_flare : "Flare"
[
	scale(float) : "Scale" : 1
	duration(float) : "Duration" : 30
	
	spawnflags(Flags) =
	[
		1 : "No DLight" : 0
		2 : "No Smoke" : 0
		4 : "Infinite" : 0
		8 : "Start off" : 0
	]

	input Start(float) : "Starts the flare burning. The flare will burn for the specified number of seconds (0 = infinite)."
	input Die(float) : "Causes the flare to fade out over the specified number of seconds, and then die (0 = die instantly)."
	input Launch(float) : "Launch the flare forward with the specified speed."
]


@PointClass base(Targetname, Parentname, Angles) = env_muzzleflash : "Muzzle Flash" 
[
	parentattachment(string) : "Parent Attachment" : "" : "The name of an attachment on the parent to hierarchically attach to."
	scale(float) : "Scale" : "1" : "Size of the muzzle flash."
	
	input Fire(void) : "Fires the effect once."
]


@PointClass base(Targetname, Parentname) size(-4 -4 -4, 4 4 4) color(0 180 0) = env_terrainmorph : 
	"Morphs terrain by pulling vertices along a normal.\n\n" +
	"Place this entity the desired distance from a terrain surface and set ANGLES " +
	"to the normal along which you want to pull the surface's vertices. If you set the INSTANT spawnflag, " +
	"the morph will take place instantly instead of over time.\n"
[
	startradius( integer ) : "Start Radius" : 500 : "Radius of the effect when morphing begins. Only this value is used" +
													"if the effect is flagged to occur instantly."
	goalradius( integer ) : "Goal Radius" : 100 : "Radius of the effect at the end of morphing. The radius of this effect will change from "+
												  "Start Radius to Goal Radius over the duration of this effect. This value is ignored if the effect is flagged to occur instantly."

	duration( integer ) : "Duration" : 3 : "The morph will take place over this period of time (seconds). Ignored if flagged to occur instantly"

	fraction( integer ) : "Displacement Fraction" : 1 : "If set to 1, the terrain surface will be pulled exactly to this entity's position." +
														" If set to 0.5, the surface will be pulled exactly half way to this entity's position. " +
														"If set to 2, the surface will be pulled to an imaginary point twice as far away as this entity. " +
														"(Any Displacement Fraction greater than 1.0 will result in clipping. The surface cannot be pulled beyond " +
														"This entity's position and any vertices attemping will clip to this entity's position. You may use this feature to create mesas.)"

	// Inputs
	input BeginMorph(void) : "Begin Morph"

	spawnflags(flags) =
	[
		1: "Instant" : 0 
	]
]

@PointClass base(Targetname, EnableDisable) = logic_achievement :
	"Sends an achievement system related event from the map to the achievement system."
[
	//keyvalues
	
	AchievementEvent(choices) : "Achievement Event" : 0 : "Named event is sent to the achievement system when this entity receives a 'FireEvent' input." =
	[
		"ACHIEVEMENT_EVENT_HL2_PUT_CANINTRASH"					: "[HL2] Put the can in the trash."		
	]

	// Inputs
	input Toggle(void) : "Toggle the relay between enabled and disabled."
	input FireEvent(void) : "Tells the achievement system the specifed event has occured."
	
	// Outputs
	output OnFired(void) : "When the event fires, this fires."
]


//-------------------------------------------------------------------------
//
// Camera/monitor entities
//
//-------------------------------------------------------------------------
@PointClass base(Parentname, Angles) studioprop("models/editor/camera.mdl") = point_camera : "Camera"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0 
	]

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	FOV(float) : "FOV" : 90 : "Field of view in degrees"
	resolution(float) : "resolution" : 256 : "width/height of the render target for the camera"
	UseScreenAspectRatio(choices) : "Screen Aspect Ratio" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogEnable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogColor(color255) : "Fog Color" : "0 0 0"
	fogStart(float) : "Fog Start" : 2048 : "The near fog plane."
	fogEnd(float) : "Fog End" : 4096 : "The far fog/clipping plane."
	fogMaxDensity(float) : "Fog Max Density [0..1]" : 1 : "The maximum fog density. 0=no fog, 1=full fog."

	// Inputs
	input ChangeFOV(string) : "Changes camera's FOV over time"
	input SetOnAndTurnOthersOff(void) : "Turn the camera on, and turn all other cameras off."
	input SetOn(void) : "Turn the camera on."
	input SetOff(void) : "Turn the camera off."
]

@SolidClass base(func_brush) = func_monitor :
	"A monitor that renders the view from a given point_camera entity."
[
	target(target_destination) : "Camera name"
	
	// Inputs
	input Toggle(void) : "Toggle - If on, turn off, if off, turn on."
	input Enable(void) : "Enable."
	input Disable(void) : "Disable."
	input SetCamera(string) : "Sets the camera to use for this monitor. Takes the name of a point_camera entity in the map."
]

@SolidClass base(func_brush) = func_bulletshield :
	"A shield that stops only bullets."
[

]


//-------------------------------------------------------------------------
//
// Vehicles.
//
//-------------------------------------------------------------------------
@BaseClass base(Targetname, Origin, DamageFilter,  Global, prop_static_base) = BaseVehicle
[
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/jeep_test.txt"
	actionScale(float) : "Scale of action input / framerate" : "1"

	// Inputs
	input Action(float) : "Set the speed of the action animation"

	input TurnOn(void) : "Turn on: Start engine & enable throttle"
	input TurnOff(void) : "Turn off: Stop engine, disable throttle, engage brakes."

	input Lock(void) : "Prevent the player from entering or exiting the vehicle."
	input Unlock(void) : "Re-allow the player to enter or exit the vehicle."
]


@BaseClass base(BaseVehicle) = BaseDriveableVehicle
[
	VehicleLocked(choices) : "Start locked" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	

	// Outputs
	output PlayerOn(void) : "Player entered the vehicle"
	output PlayerOff(void) : "Player exited the vehicle"
	
	output PressedAttack(void) : "Player Pressed attack key"
	output PressedAttack2(void) : "Player Pressed attack2 key"

	output AttackAxis(string) : "State of attack button [0,1]"
	output Attack2Axis(string) : "State of attack2 button [0,1]"
	
	// Inputs
	input HandBrakeOn(void) : "Turns the handbrake on"
	input HandBrakeOff(void): "Releases the handbrake"
]

@PointClass base(BaseVehicle) studioprop() = prop_vehicle :
	"Studiomodel vehicle that can be driven via inputs."
[
	// Inputs
	input Steer(float) : "Steer the vehicle +/-1"
	input Throttle(float) : "Throttle +/-1"

	spawnflags(flags) =
	[
		1 : "Always Think (Run physics every frame)" : 0
	]
]


@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_driveable :
	"Generic driveable studiomodel vehicle."
[
]

@PointClass base(Targetname, Angles) studio() = point_apc_controller : "APC Controller"
[
	spawnflags(flags) =
	[
		1 : "Active" : 0
	]

	yawrate(string) : "Yaw rate" : "30"
	yawtolerance(string) : "Yaw tolerance" : "15"
	pitchrate(string) : "Pitch rate" : "0"
	pitchtolerance(string) : "Pitch tolerance" : "20"
	rotatestartsound(sound) : "Rotate Start Sound" : ""
	rotatesound(sound) : "Rotate Loop Sound" : ""
	rotatestopsound(sound) : "Rotate Stop Sound" : ""
	minRange(string) : "Minmum target range" : "0"
	maxRange(string) : "Maximum target range" : "0"
	targetentityname(string) : "Name of entity I should follow/attack" : ""

	// Inputs
	input Activate(void) : "Turn the APC rockets on"
	input Deactivate(void) : "Turn the APC rockets off (go dormant)"

	// Outputs
	output OnFireAtTarget(void) : "Fires when a valid target is found and the APC should shoot rockets"
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_apc :
	"APC with mounted guns, can only be driven by a vehicle driver or a npc_apcdriver."
[
	missilehint(target_destination) : "Missile Hint Target" : "" : "Name of one or more info_apc_missile_hint entities to use to determine what to hit."
	
    //Inputs
    input FireMissileAt(target_destination) : "A target to fire a missile at"
	input Destroy(void) : "Causes the APC to blow up."

    // Outputs
	output OnFiredMissile(void) : "Fired when the APC shoots a missile."
	output OnDeath(void) : "Fired when the APC is killed."
	output OnDamaged(void) : "Fired when the APC is damaged."
	output OnDamagedByPlayer(void) : "Fired when the APC is damaged by the player."
]

@SolidClass base(Targetname, Origin, Angles, EnableDisable) = info_apc_missile_hint :
	"Something that helps APC missiles guide. If the missile can hit the associated target entity"+
	"between the time it takes the current enemy to enter + leave the hint, then the missile will guide to the entity."
[
	target(target_destination) : "Target Entity" : "" : "The entity that the missile will guide towards if the conditions are met."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_jeep :
	"Driveable studiomodel jeep."
[
	input StartRemoveTauCannon(void) : "Start the tau removal sequence."
	input FinishRemoveTauCannon(void) : "Finish the tau removal sequence."
	
	// FIXME: These will move into episodic
	input LockEntrance( void ) : "Stops NPC's from entering the vehicle until unlocked."
	input UnlockEntrance( void ) : "Allows NPC's to enter the vehicle."
	input LockExit( void ) : "Stops NPC's from exiting the vehicle until unlocked."
	input UnlockExit( void ) : "Allows NPC's to exit the vehicle."
	input EnableRadar( void ) : "Turn on the Jalopy radar"
	input DisableRadar( void ) : "Turn off the Jalopy radar"
	input EnableRadarDetectEnemies( void ) : "Enable Jalopy radar to detect Striders and Hunters"
	input AddBusterToCargo( void ) : "Put a striderbuster in the cargo trigger"
	input SetCargoHopperVisibility ( bool ) : "Set the strider buster hopper thingy to be visible, or invisible."

	input DisablePhysGun(void) : "Disable physgun interactions with the jeep."
	input EnablePhysGun(void) : "Enable physgun interactions with the jeep (default)."

	input CreateLinkController(void) : "Automatically builds and attaches a link controller to the car, which cuts the node connections under the car while the car is standing still."
	input DestroyLinkController(void) : "Destroys the link controller created by CreateLinkController."

	
	CargoVisible(choices): "Hopper Visible" : 0 : "Is the striderbuster cargo hopper visible?" =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		1 : "HUD Locator Precache" : 0
	]

	
	// FIXME: These are going to change!
	output OnCompanionEnteredVehicle(void) : "Companion has entered the vehicle."
	output OnCompanionExitedVehicle(void) : "Companion has exited the vehicle."
	output OnHostileEnteredVehicle(void) : "Hostile has entered the vehicle."
	output OnHostileExitedVehicle(void) : "Hostile has exited the vehicle."
]

@PointClass base(BaseDriveableVehicle) studioprop() = vehicle_viewcontroller : 
	"Vehicle hack to control player view"
[
	input ForcePlayerIn(string) : "Force the player into the vehicle. The animation to use can be specified in the parameter. Without a parameter, the player just teleports."
	input ForcePlayerOut(void) : "Force the player out of the vehicle."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_airboat :
	"Driveable studiomodel airboat."
[
	model(studio) : "World model" : "models/airboat.mdl"
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/airboat.txt"
	EnableGun(choices) : "Has Gun" : 0 : "Whether the airboat's gun is enabled or disabled." =
	[
		0 : "No"
		1 : "Yes"
	]
	input EnableGun(bool) : "Enables or disables the airboat gun and associated crosshair."
	input InputStartRotorWashForces(void) : "The airboat will start to be blown around by the helicopter rotor wash."
	input InputStopRotorWashForces(void) : "The airboat will no longer be blown around by the helicopter rotor wash."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_cannon :
	"Driveable studiomodel cannon."
[

]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_crane :
	"Driveable studiomodel crane."
[
	magnetname(target_destination) : "Magnet entity" : ""

	input ForcePlayerIn(void) : "Force the player to get into the crane. Only works in singleplayer."
]

@PointClass base(BaseDriveableVehicle, Parentname) studioprop() = prop_vehicle_prisoner_pod :
	"Combine prisoner pod that the player can ride in."
[
	model(studio) : "World model" : "models/vehicles/prisoner_pod.mdl"
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/prisoner_pod.txt"
	
	input Open(void) : "Plays the pod's open animation and unlocks the pod for entry or exit."
	input Close(void) : "Plays the pod's close animation and locks the pod for entry or exit."
	input EnterVehicle(void) : "Forces the activator (or player) into the pod."
	input EnterVehicleImmediate(void) : "Forces the activator (or player) into the pod without enter/exit animations."
	input ExitVehicle(void) : "Boots the prisoner out of the pod."
	
	output OnOpen(void) : "Fired when the pod is open enough to enter."
	output OnClose(void) : "Fired when the pod too closed to enter."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_digger :
	"Digger vehicle capable of crushing soft rock and fleshy things"
[
	output OnDeath(void) : "Fired when the APC is killed."
	output OnDamaged(void) : "Fired when the APC is damaged."
]


@PointClass base(BaseSpeaker) iconsprite("editor/ambient_generic.vmt") = env_speaker : "Announcement Speaker"
[
]

//-------------------------------------------------------------------------
// Script entities
//-------------------------------------------------------------------------

@PointClass base(Angles,Targetname,Parentname) = script_tauremoval : "Script: Custom entity used to handle the tau removal sequence in coast. (unused)"
[
	vortigaunt(target_destination) : "Vortigaunt to use"

	// Inputs
	input StartScript(void) : "Start the script."
	input RemoveTau(void) : "Start removing the Tau cannon now."
]

@PointClass base(Targetname) = script_intro : "Script: Custom entity used to handle the intro sequence."
[
	// Inputs
	input Activate(void) : "Take control of the player's view and start blending the two scenes."
	input Deactivate(void) : "Stop controlling the view."
	input SetCameraViewEntity(string) : "Set the viewpoint to blend with the player's viewpoint."
	input SetBlendMode(integer) : "Set the blending mode to use."
	input SetFOV(integer) : "Set the fov for the second camera."
	input SetNextFOV(integer) : "Set the FOV to blend to over time. Follow this with a SetFOVBlendTime input to start the fov blend."
	input SetFOVBlendTime(float) : "Set the amount of time it should take to blend to the next fov target, and start blending."
	input SetNextBlendMode(integer) : "Set the blending mode to blend to over time. Follow this with a SetNextBlendTime input to start the mode blend."
	input SetNextBlendTime(float) : "Set the amount of time it should take to blend to the next mode, and start blending."
	input FadeTo(string) : "Fade to a specific alpha amount of an amount of time. Parameters: <alpha> <duration>"
	input SetFadeColor(string) : "Set the fade color. Parameters: <Red> <Green> <Blue>"

	alternatefovchange(choices) : "Match env_zoom's FOV transition" : 0 : "Whether the script should match env_zoom's FOV transition." =
	[
		0 : "No"
		1 : "Yes"
	]
]

//-------------------------------------------------------------------------
//
// Special effects
//
//-------------------------------------------------------------------------

@PointClass base(Angles,Targetname,Parentname) = env_citadel_energy_core : "Special effect for the energy cores in citadel."
[
	spawnflags(Flags) = 
	[
		1 : "No small particles" : 0
		2 : "Start on" : 0
	]

	scale(float) : "Scale" : 1 : "Scale of the effect.  1 is the default size, 2 is twice that, etc."

	// Inputs
	input StartCharge(float) : "Start charging the core over specified number of seconds."
	input StartDischarge(void) : "Start discharging the core over specified number of seconds."
	input Stop(float) : "Stops the effect at any point."
]

@PointClass base(Angles,Targetname,Parentname) size(-4 -4 -4, 4 4 4) color(0 0 255) line( 0 0 255, targetname, EndTargetName) = env_alyxemp : "Special effect for the Alyx's EMP device."
[
	Type(choices) : "EMP Type" : 0 =
	[
		0 : "Small"
		1 : "Large"
	]	

	EndTargetName(target_destination) : "Target Entity" : "" : "Entity to use as a target endpoint."

	// Inputs
	input StartCharge(float) : "Start charging the effect over specified number of seconds."
	input StartDischarge(void) : "Start discharging the effect over specified number of seconds."
	input Stop(float) : "Stops the effect at any point."
	input SetTargetEnt(string) : "Sets the target entity for the effect."
]


@PointClass = test_sidelist : "Test entity for Ken!"
[
	sides(sidelist) : "Sides"
]


//-------------------------------------------------------------------------
// Countdown timer for the teleporter at the end of the game
//-------------------------------------------------------------------------

@PointClass base(Targetname) iconsprite("editor/info_target.vmt")  = info_teleporter_countdown : "Countdown timer for the teleporter. The status of the teleporter will appear on vgui_screen entities whose panel is 'teleport_countdown_screen'." 
[
	// Inputs
	input StartCountdown(float) : "Starts the teleporter countdown. Requires an argument which is the number of seconds for the countdown."
	input StopCountdown(void) : "Stops the countdown permanently"
	input Disable(void) : "Pauses the countdown due to a temporary malfunction. A warning sign will appear on the linked vgui screens."
	input Enable(void) : "Restarts the countdown since the malfunction is finished."
]



@PointClass base(BaseDriveableVehicle, Parentname) studioprop() = prop_vehicle_choreo_generic :
	"Generic Choreo vehicle used for magical events."
[
	model(studio) : "World model" : "models/vehicles/prisoner_pod.mdl"
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/choreo_vehicle.txt"
	
	input Open(void) : "Plays the vehicle's open animation and unlocks the vehicle for entry or exit."
	input Close(void) : "Plays the vehicle's close animation and locks the vehicle for entry or exit."
	input EnterVehicle(void) : "Forces the activator (or player) into the vehicle."
	input EnterVehicleImmediate(void) : "Forces the activator (or player) into the vehicle without enter/exit animations."
	input ExitVehicle(void) : "Boots the prisoner out of the vehicle."
	input Viewlock(bool) : "Set true to prevent Gordon from looking around *at all*. Set false to let him look within limits."
	input SetAnimation(string) : "Force the prop to play an animation. The parameter should be the name of the animation."
	
	output OnOpen(void) : "Fired when the vehicle is open enough to enter."
	output OnClose(void) : "Fired when the vehicle too closed to enter."

	ignoremoveparent(choices) : "Ignore Move Parent on Exit" : 0 : "Should the player ignore this vehicle's move parent went performing exit checks." =
	[
		0 : "No"
		1 : "Yes"
	]

	ignoreplayer(choices) : "Ignore Player collision" : 0 : "The player wont collide against this vehicle when moving around." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@FilterClass base(BaseFilter) iconsprite("editor/filter_class.vmt") = filter_combineball_type :
	"A filter that filters by combine ball type."
[
	balltype(choices) : "Ball Type" : 1 =
	[
		0 : "Not Thrown (in combine ball field, etc)"
		2 : "Thrown/Launched by the player's physcannon"
		3 : "Launched by point_combine_ball_launcher"
	]	
]

@PointClass base(Targetname) = env_entity_dissolver: "Entity Dissolver"
[
	input Dissolve(string) : "Dissolve target, if no target is passed it'll use the target specified in the target field."
	target(target_destination) : "Target to Dissolve" : "" : "Targetname of the entity you want to dissolve."

	magnitude(integer) : "Magnitude" : 250 : "How strongly to push away from the center."


	dissolvetype(choices) : "Dissolve Type" : "Energy" =
	[
		0 : "Energy"
		1 : "Heavy electrical"
		2 : "Light electrical"
		3 : "Core Effect"
		4 : "Fire"
	]
]

@PointClass base(Targetname) = env_entity_freezing: "Entity Freezer"
[	
	input SetFreezeTarget(string) : "Specifies or overrides the freeze target. Accepts entity name as a string."
	input SetFreezeGoalAmount(float) : "Specifies or overrides freeze goal amount."
	input FreezeOverSpecifiedTime(float) : "Freezes the target (which should be set beforehand) over the specified time, up to goal freeze amount (which should be set beforehand as well)."
	
	target(target_destination) : "Target to Freeze" : "" : "Targetname of the entity you want to freeze"
	freezegoalamount(float) : "Freeze Goal Amount" : 1 : "Target should freeze up to this amount"
]

@PointClass base(Targetname, Angles) studio("models/props_combine/coreball.mdl") = prop_coreball: "Core Ball" 
[
	input SetScaleX(vector) : "Scales the coreball in one Axis. Params: <New Size> <Time>"
	input SetScaleY(vector) : "Scales the coreball in one Axis. Params: <New Size> <Time>"
	input SetScaleZ(vector) : "Scales the coreball in one Axis. Params: <New Size> <Time>"
]

@PointClass base(Targetname, Studiomodel, Angles, RenderFields) studioprop() = prop_scalable : "Scalable Prop" 
[
	input SetScaleX(vector) : "Scales the prop in one Axis. Params: <New Size> <Time>"
	input SetScaleY(vector) : "Scales the prop in one Axis. Params: <New Size> <Time>"
	input SetScaleZ(vector) : "Scales the prop in one Axis. Params: <New Size> <Time>"
]

@PointClass base(Targetname, Angles) sphere(radius) sphere(inner_radius) = point_push: "Point Push"
[
	spawnflags(Flags) = 
	[
		1 : "Test LOS before pushing" : 0
		2 : "Use angles for push direction" : 0
		4 : "No falloff (constant push at any distance)" : 0
		8 : "Push players" : 1
		16 : "Push physics" : 1
	]
	
	enabled(choices) : "Start Enabled"	: 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	magnitude(float) : "Magnitude" : 100 : "How strongly to push away from the center."
	radius(float) : "Radius" : 128 : "Radius to affect items in."
	inner_radius(float) : "Inner radius" : "0" : "If not zero, the LOS is calculated from a point intersecting this sphere."
	
	input Enable(void) : "Enable the push."
	input Disable(void): "Disable the push."
]

@NPCClass base(Targetname, Angles, BaseFadeProp, Global) studio("models/antlion_grub.mdl") sphere(fademindist) sphere(fademaxdist) = npc_antlion_grub :
	"Antlion grub"
[
	spawnflags(Flags) = 
	[
		1 : "Do not automatically attach to surface" : 0
	]

	input Squash( void ) : "Squash the grub!"

	output OnAgitated( void ) : "Fired when the grub is stepped on or damaged."
	output OnDeath( void ) : "Fired when the grub is killed."
	output OnDeathByPlayer( void ) : "Fired when the grub is killed (only by the player)."
]


@PointClass base(BasePropPhysics) studioprop() sphere(fademindist) sphere(fademaxdist) studio("models/magnusson_device.mdl") = weapon_striderbuster :
	"Strider Buster"
[
	spawnflags(Flags) = 
	[
		8388608 : "Don't use game_weapon_manager" : 0
	]
	
	dud(choices) : "Dud Bomb" : 0 : "This striderbuster is not armed (to be used for training)." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnAttachToStrider(void) : "Fired when the striderbuster successfully attaches to a strider."
	output OnDetonate(void) : "Fired when the striderbuster detonates."
	output OnShatter(void) : "Fired when the striderbuster shatters without detonating."
	output OnShotDown(void) : "Fired when the striderbuster shatters after being shot down by Hunters"
]

@PointClass base(Targetname, Parentname) sphere(radius) = point_flesh_effect_target : "Flesh Effect Target"
[
	radius(float) : "Radius" : 8 : "Radius of the effect when active"

	input SetRadius(vector) : "Sets a new radius and time to interpolate to it(as a vector <Size> <Time in Seconds>)."
]

@NPCClass base(BaseNPC) studio("models/stalker.mdl") = npc_stalker : "Stalker"
[
	BeamPower(choices) : "Beam Power" : "Low" =
	[
		0 : "Low"		 
		1 : "Medium"		 
		2 : "High"		 
	]	
]

@PointClass base(Targetname, Parentname, RenderFields, Angles, DXLevelChoice) studio("models/editor/cone_helper.mdl") = point_spotlight : 
	"An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. "+
	"Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests."
[
	spawnflags(Flags) = 
	[
		1 :  "Start On" : 1
		2 :  "No Dynamic Light" : 1
	]
	
	spotlighttexture(sprite) : "Spotlight texture" : "sprites/glow_test02.vmt"
	spotlightlength(integer) : "Spotlight Length" : 500 : "Length of the spotlight beam."
	spotlightwidth(integer) : "Spotlight Width" : 50 : "Width of the spotlight beam."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."
	
	// Inputs
	input LightOn(void) : "Turn the spotlight on."
	input LightOff(void) : "Turn the spotlight off"
	input Toggle(void) : "Toggle the spotlight"
	
	// outputs
	output OnLightOn(void) : "Fires when light turns on."
	output OnLightOff(void) : "Fires when light turns off."

]

@PointClass base(Item) studio("models/items/flare.mdl")= item_ammo_flare : "One flare for the Flaregun" []
@PointClass base(Item) studio("models/_Weapons/flarebox.mdl")= item_ammo_flare_box : "Box of flares for the Flaregun" []

@PointClass base(Item) studio("models/_Weapons/oicw_ammo_box.mdl")= item_ammo_oicw : "OICW Ammo Box" []
@PointClass base(Item) studio("models/_Weapons/flarebox.mdl")= item_oicw_grenades : "OICW Altfire" []

@PointClass base(Item) studio("models/weapons/w_missile_closed.mdl")= item_rpg_round : "RPG Round" []

@PointClass base(Item) studio("models/items/boxsrounds.mdl")= item_ammo_pistol : "Box of Pistol ammo" []
@PointClass base(Item) studio("models/items/boxsrounds.mdl")= item_ammo_pistol_large : "Large Box of Pistol ammo" []
@PointClass base(Item) studio("models/items/BoxMRounds.mdl")= item_ammo_smg1 : "Box of SMG1 ammo" []
@PointClass base(Item) studio("models/items/BoxMRounds.mdl")= item_ammo_smg1_large : "Large Box of SMG1 ammo" []
@PointClass base(Item) studio("models/items/combine_rifle_cartridge01.mdl")= item_ammo_ar2 : "Box of AR2 ammo" []
@PointClass base(Item) studio("models/items/combine_rifle_cartridge01.mdl")= item_ammo_ar2_large : "Large Box of AR2 ammo" []
@PointClass base(Item) studio("models/items/357ammobox.mdl")= item_ammo_357 : "Box of 357 ammo" []
@PointClass base(Item) studio("models/items/357ammobox.mdl")= item_ammo_357_large : "Large Box of 357 ammo" []
@PointClass base(Item) studio("models/items/CrossbowRounds.mdl")= item_ammo_crossbow : "Box of Crossbow ammo" []
@PointClass base(Item) studio("models/items/BoxBuckshot.mdl")= item_box_buckshot : "Box Buckshot" []
@PointClass base(Item) studio("models/weapons/w_missile_closed.mdl")= item_rpg_round : "RPG Round" []
@PointClass base(Item) studio("models/items/AR2_Grenade.mdl")= item_ammo_smg1_grenade : "SMG1 Grenade" []
@PointClass base(Item) studio("models/items/battery.mdl") = item_battery : "HEV battery" []
@PointClass base(Item) studio("models/items/healthkit.mdl") = item_healthkit : "Small Health Kit" []
@PointClass base(Item) studio("models/healthvial.mdl") = item_healthvial : "Personal Health Kit" []
@PointClass base(Item) studio("models/items/combine_rifle_ammo01.mdl") = item_ammo_ar2_altfire : "AR2 Alt-fire Round" []
@PointClass base(Item) studio("models/grub_nugget_medium.mdl") = item_polypnugget : "Polyp Healing Nugget" []

@PointClass base(Item) studio("models/2003/items/boxsrounds.mdl")= item_box_smallround : "Box of Pistol ammo (2003)" []
@PointClass base(Item) studio("models/2003/items/largeboxsrounds.mdl")= item_large_box_smallround : "Large Box of Pistol ammo (2003)" []
@PointClass base(Item) studio("models/2003/items/boxmrounds.mdl")= item_box_mediumround : "Box of Rifle ammo (2003)" []
@PointClass base(Item) studio("models/2003/items/largeboxmrounds.mdl")= item_large_box_mediumround : "Large Box of Rifle ammo (2003)" []
@PointClass base(Item) studio("models/2003/items/boxbrounds.mdl")= item_box_largeround : "Box of Machinegun ammo (2003)" []
@PointClass base(Item) studio("models/2003/items/largeboxbrounds.mdl")= item_large_box_largeround : "Large Box of Machinegun ammo (2003)" []


@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = logic_keypad : "An interactive keypad"
[
	//my_target(string) : "Target" : ""
	code(string) : "Code (MAX 4!)" : "1234"
	label(string) : "Label" : "Mah keypad"
	hide_pass(choices) : "Hide password?" : "1" =
	[
		"0" : 	"No"
		"1": 	"Yes"
	]
	
	// Inputs
	input Enable(void) : "Enables the keypad."
	
	// Outputs
	output OnCorrectCode(void) : "Fired when the code is correct."
	output OnIncorrectCode(void) : "Fired when the code is incorrect."
]

@PointClass base(Targetname, Parentname, Angles) icon(editor/sky_camera) = sky_camera : 
	"An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be."
[	
	scale(integer) : "3D Skybox scale" : 16 : "Scale of the skybox."
	fogenable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogblend(choices) : "Fog Blend" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	use_angles(choices) : "Use Angles for Fog Dir" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Dir" : "1 0 0"
	fogstart(string) : "Fog Start" : "500.0" : "Distance at which the skybox fog should start."
	fogend(string) : "Fog End" : "2000.0" : "Distance at which the skybox fog should be fully opaque."
	fogmaxdensity(string) : "Fog Max Density" : "1.0" : "Maximum density for sky_camera fog"
	
	input DeactivateCamera(void) : "Tells 3dsky to project from this camera's origin"
	input SwitchToThisCamera(void) : "Tells 3dsky to project from this camera's origin"
	input Disable3dSkybox(void) : "Equivalent of r_3dsky 0"
	input Enable3dSkybox(void) : "Equivalent of r_3dsky 1"
	
	activeonstartup(choices) : "Set to Yes if only camera or first to be active" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname, Parentname) iconsprite("editor/scripted_sentence.vmt") sphere(radius) = point_message : 
	"An entity that displays a text message in the world, at its origin."
[
	spawnflags(flags) =
	[
		1: "Start Disabled" : 0
	]

	message(string) : "Entity Message"
	radius(integer) : "Show message radius" : 128 : "Distance the player must be within to see this message."
	developeronly(choices) : "Developer Only?" : 0 : "If set, this message will only be visible when developer mode is on." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Start displaying the message text, if the player is within the message radius."
	input Disable(void) : "Stop displaying the message text."
]

@NPCClass base(BaseCombine) studio() = npc_combine_s : "Combine Soldier"
[
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	model(choices) : "Model" : "models/combine_soldier.mdl" : "Regular Soldier" = 
	[
		"models/combine_soldier.mdl" : "Regular Soldier"
		"models/combine_soldier_prisonguard.mdl" : "Nova Prospekt Soldier"
		"models/combine_super_soldier.mdl" : "Elite Soldier"
		"models/2003/combine_soldier.mdl" : "2003 Soldier"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Pressure the enemy (Keep advancing)"
		"2" : "Pressure until within 30ft, then normal"
	]
	
	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. WARNING: this animation only has a north component. For use under very special circumstances only." =
	[
		"0" : "No"
		"2" : "Yes"
	]
]

@PointClass base(Targetname, Parentname) size(8 8 8)  sphere(m_flRadius) = point_tesla : 
	"An entity that creates tesla lightning arcs around its origin."
[
	m_SourceEntityName(string) : "Source Entity" : "" : "If specified, tesla lightning will originate from the specified entity. Otherwise, they originate from this entity."
	m_SoundName(string) : "Sound Name" : "DoSpark" : "Sound to be played whenever lightning is created."

	texture(sprite) : "Sprite Name" : "sprites/physbeam.vmt" : "Material to use for the tesla lightning beams."

	m_Color(color255) : "Color" : "255 255 255"

	m_flRadius(integer) : "Radius" : 200 : "Radius around the origin to find a point to strike with a tesla lightning beam."

	beamcount_min(integer) : "Min # of Beams" : 6 : "Minimum number of tesla lightning beams to create when creating an arc."
	beamcount_max(integer) : "Max # of Beams" : 8 : "Maximum number of tesla lightning beams to create when creating an arc."
	
	thick_min(string) : "Min Beam Width" : "4" : "Minimum width of the tesla lightning beams."
	thick_max(string) : "Max Beam Width" : "5" : "Maximum width of the tesla lightning beams."
	
	lifetime_min(string) : "Min Time Visible" : "0.3" : "Minimum lifetime of the tesla lightning beams."
	lifetime_max(string) : "Max Time Visible" : "0.3" : "Maximum lifetime of the tesla lightning beams."
	
	interval_min(string) : "Min Time Between Arcs":"0.5" : "Minimum time delay between random arcing."
	interval_max(string) : "Max Time Between Arcs":"2" : "Maximum time delay between random arcing."

	// Inputs
	input TurnOn(void) : "Turn emitter on." 
	input TurnOff(void) : "Turn emitter off."
	input DoSpark(void) : "Force a single arc."
]

@SolidClass base(Targetname) color(0 128 255) sphere(FadeStartDist) sphere(FadeDist) = func_areaportalwindow : 
	"An entity that can be used to optimize the visibility in a map. If you seal off an area with them, when the viewer moves the specified distance away from them, they will go opaque and the parts inside the area will not be drawn. The 'target' brush model should enclose the func_areaportal window so no parts of it are culled by the window. If you use the optional foreground brush model, then it should enclose the 'target' brush model."
[
	target(target_destination)  : "Rendered Window" : : "The name of a brush model to render as the window."
	FadeStartDist(float) : "Fade Start Distance" : 128 : "When the viewer is closer than this distance, the alpha is set to 'TranslucencyLimit'."
	FadeDist(float) : "Fade End Distance"   : 512 : "When the viewer is at this distance, the portal becomes solid and closes off."
	TranslucencyLimit(string) : "Translucency limit"  : "0.0" : "This value limits the translucency of the bmodel and prevents it from becoming invisible when the viewer is right on top of it."
	BackgroundBModel(string) : "Foreground bmodel"   : "" : "(Optional) brush model that is drawn after the fading brush model. This model should have alpha in its textures so you can see through it."
	PortalVersion(integer)	readonly	: "Portal Version"      : 1  : "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features."
	
	// Inputs
	input SetFadeStartDistance(integer) : "Set fade start distance."
	input SetFadeEndDistance(integer) : "Set fade end distance."
]


@PointClass base(Targetname) iconsprite("editor/env_dof.vmt") = env_dof_controller : 
	"An entity that controls the depth of field settings for the player. Depth of field simulates camera blur of out-of-focus regions of the scene."
[
	enabled(choices) : "Enable DoF" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	near_blur(float) : "Near blur depth" : 20 : "Distance that the blurriness is at its peak near the viewpoint."
	near_focus(float) : "Near focus depth" : 100 : "Distance that the focus is in full effect near the viewpoint."
	near_radius(float) : "Near blur radius" : 8 : "Radius (in pixels) to blur the surrounding pixels."

	far_blur(float) : "Far blur depth" : 1000 : "Distance where blurriness is at its peak far from the viewpoint."
	far_focus(float) : "Far focus depth" : 500 : "Distance that the focus is in full effect far from the viewpoint."
	far_radius(float) : "Far blur radius" : 8 : "Radius (in pixels) to blur the surrounding pixels."
	focus_target(target_source) : "Focus target" : "" : "Entity to use as a focal point."
	focus_range(float) : "Focus target range" : "200" : "Distance behind the focal plane to remain in focus."

	// Inputs
	input SetNearBlurDepth(float) : "Set the distance in front of the focus region at which the scene will be completely blurred using the near blur radius. Must be smaller than NearFocusDepth."
	input SetNearFocusDepth(float) : "The area between the near focus and far focus distances is perfectly in focus. Must be smaller than FarFocusDepth."
	input SetFarFocusDepth(float) : "The area between the near focus and far focus distances is perfectly in focus. Must be smaller than FarBlurDepth."
	input SetFarBlurDepth(float) : "Set the distance beyond the focus region at which the scene will be completely blurred using the far blur radius. Must be larger than FarFocusDepth."
	input SetNearBlurRadius(float) : "Set the blur radius (in pixels) to use at the near blur distance. Set to 0 to disable near blur."
	input SetFarBlurRadius(float) : "Set the blur radius (in pixels) to use at the far blur distance. Set to 0 to disable far blur."
	input SetFocusTarget(string) : "Set the focal target for the effect."
	input SetFocusTargetRange(float) : "Set the distance behind the focal point that will remain in focus."
]



@PointClass base(Targetname, DXLevelChoice, Angles) iconsprite("editor/fog_controller.vmt") color(255 255 255) = env_fog_controller : 
	"An entity that controls the fog and view distance in the map."
[
	// Inputs
	input SetStartDist(float) : "Set the fog start distance."
	input SetEndDist(float) : "Set the fog end distance."
	input TurnOn(void) : "Turn the fog on."
	input TurnOff(void) : "Turn the fog off."
	input SetColor(color255) : "Set the primary fog color."
	input SetColorSecondary(color255) : "Set the secondary fog color."
	input SetFarZ(integer): "Set the far clip plane distance."
	input SetAngles(string) : "Set the angles to use for the secondary fog direction."

	input SetColorLerpTo(color255) : "Set the primary fog color."
	input SetColorSecondaryLerpTo(color255) : "Set the secondary fog color."
	input SetStartDistLerpTo(float) : "Set the fog start distance."
	input SetEndDistLerpTo(float) : "Set the fog end distance."
	input StartFogTransition(void) : "Start fog transition."

	input SetMaxDensity(float) : "Set max density"

	// Starting fog parameters for the level. These are selectable per LOD.	
	fogenable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogblend(choices) : "Fog Blend" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	use_angles(choices) : "Use Angles for Fog Dir" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Direction" : "1 0 0"
	fogstart(string) : "Fog Start" : "500.0"
	fogend(string) : "Fog End" : "2000.0"
	fogmaxdensity(float) : "Fog Max Density [0..1]" : "1"

	foglerptime(float) : "Interpolate time" : "0"
	
	farz(string) : "Far Z Clip Plane" : "-1"
	
	spawnflags(flags) =
	[
		1 : "Master (Has priority if multiple env_fog_controllers exist)" : 0
	]
]

@PointClass base(Targetname) iconsprite("editor/scripted_sentence.vmt") = env_message : 
	"An entity that draws a text message on player's HUDs."
[
	message(string) : "Message Text"
	spawnflags(flags) =
	[
		1: "Play Once" : 0
		2: "All Clients" : 0
	]
	messagesound(sound) : "Sound Effect" : "" : "When the message is shown, this sound effect will be played, originating from this entity."
	messagevolume(string) : "Volume 0-10" : "10" : "Volume of the sound effect."
	messageattenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]
	
	// Inputs
	input ShowMessage(void) : "Shows the message and plays the sound."
	
	// Outputs
	output OnShowMessage(void) : "Fired when the message is activated."
]

@PointClass base(Targetname, DamageFilter) size(-8 -8 -8, 8 8 8) = logic_playerproxy :
	"An entity that is used to relay inputs/ouputs to the player and back to the world."
[
	// Outputs
	output OnFlashlightOn(float) 			: "Fired when the player turns on his flashlight. This output has the value of how much energy the player had when this happened [0..1]."
	output OnFlashlightOff(float) 			: "Fired when the player turns off his flashlight. This output has the value of how much energy the player had when this happened [0..1]."
	output PlayerHealth(integer)			: "The player's current health value."
	output PlayerArmor(integer)				: "The player's current suit armor value."
	output PlayerMissedAR2AltFire(void)		: "Player fired an AR2 combine ball that didn't kill any enemies."

	input SetFlashlightSlowDrain(void)		: "Puts the player's flashlight in slow-power-drain mode (for Episodic darkness)"
	input SetFlashlightNormalDrain(void)		: "Puts the player's flashlight to default power drain"
	input DisableFlashlight(void)		: "Suppress flashlight until turned on"
	input EnableFlashlight(void)		: "Add flashlight to the interface"

	input SetPlayerHealth(integer)			: "Sets the player's health to this value."
	input SetPlayerArmor(integer)			: "Sets the player's armor to this value."
	
	input RequestPlayerHealth(void) 		: "Requests the current player's health from the proxy. This will fire the PlayerHealth output with the value."
	input RequestPlayerArmor(void) 			: "Requests the current player's armor value from the proxy. This will fire the PlayerArmor output with the value."
	input RequestAmmoState(void)			: "Request the ammo state of the player. It will fire PlayerHasAmmo or PlayerHasNoAmmo outputs."
	output PlayerHasAmmo(void) 				: "Fired by request if the player has any ammo."
	output PlayerHasNoAmmo(void) 			: "Fired by request if the player doesn't have any ammo."
	
	output PlayerDied(void) 				: "Fires when the player dies."

	input LowerWeapon(void)					: "Lowers the players weapon."
	
	input EnableCappedPhysicsDamage(void) :	 "Cause player to take less damage from physics objects, and never more than 30 points from any individual strike."
	input DisableCappedPhysicsDamage(void) : "Undo effects of EnableCappedPhysicsDamage"
	input SetLocatorTargetEntity(string) : "Set the entity that the HUD locator should track. (Usually a vehicle)"
	
	input BreakCurrentWeapon(void) : "Break Currently Held Weapon"

	input DisableTinnitus(void)		: "Earringing off"
	input EnableTinnitus(void)		: "Earringing on"

	input DisableSuitComments(void)		: "When disabled, the HEV will not comment on armor values"
	input EnableSuitComments(void)		: "When disabled, the HEV will comment on armor values"	
]

@PointClass base(Targetname, Parentname) sweptplayerhull() = func_useableladder : 
	"A usable ladder with a better name"
[
	spawnflags(flags) =
	[
		1: "Fake Ladder" : 0
	]

	point0(vector) : "Start" : : "Ladder end point."
	point1(vector) : "End" : : "Ladder end point."

	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Enable this ladder."
	input Disable(void) : "Disable this ladder."

	output OnPlayerGotOnLadder(void) : "Fired whenever a player gets on this ladder."
	output OnPlayerGotOffLadder(void) : "Fired whenever a player gets off this ladder."
	ladderSurfaceProperties(string) : "Surface properties (optional)"
]

@PointClass base(Parentname) size( -16 -16 0, 16 16 4 ) color(150 100 50)= ladder_dismount : 
	"A ladder dismount point. Now with sensible, more convinient name!"
[
	target(target_destination) : "LadderName" : : "If multiple ladders are near multiple endpoints, use this to stop them from interfering with each other."
]

@SolidClass base(func_brush) = func_reflective_glass :
	"Used to produce perfectly reflective glass that renders world + entities. " +
	"Typically, you want your glass brush to have nodraw on all non-reflective surfaces " +
	"and you want to use a shader like lightmappedreflective in your material applied " +
	"to the non-nodraw surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. " +
	"NOTE: currently, you cannot use reflective glass in scenes with water, and you can only " +
	"have 1 reflective glass in your view frustum ( + pvs ) at a time."
[
	DistTooFar(float) : "Cull Distance" : 1024
	ReflectEntities(choices) : "Reflect Entities in frustum" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
]


@PointClass base(Targetname) iconsprite("editor/env_tonemap_controller.vmt") = env_tonemap_controller : 
	"An entity that controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's eyes."
[

	DefaultAutoExposureMin(float) 	: "Default Exposure Min" : "0.75"
	DefaultAutoExposureMax(float)	: "Default Exposure Max" : "1.50"
	DefaultBloomScale(float) 		: "Default Bloom Scale"  : "1.20"
	DefaultTonemapRate(float) 		: "Default Tonemap Rate" : "0.15"
	
	// Inputs
	input SetTonemapScale(void) : "Set the player's tonemap scale. It should be a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open."
	input BlendTonemapScale(string) : "Blend from the player's current tonemap scale to a new one. The parameter syntax is as follows: <target tonemap scale> <blend duration>. For example: '0.5 10' would blend from the current tonemap scale to 0.5 over a period of 10 seconds. Tonemap scale is a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open."
	input UseDefaultAutoExposure(void) : "Revert to using the default tonemap auto exposure."
	input SetAutoExposureMin(float) : "Set a custom tonemap auto exposure minimum."
	input SetAutoExposureMax(float) : "Set a custom tonemap auto exposure maximum."
	input SetBloomScale(float) : "Set a custom bloom scale."
	input SetTonemapRate(float) : "Set the rate for autoexposure adjustment."
]

@SolidClass base(DXLevelChoice) color(0 180 0) = func_detail_blocker : 
	"Precludes placement of detail props."
[
]

@PointClass base(Angles) size( -8 -8 -8, 8 8 8 ) instance() = func_instance : 
	"An entity for placing an instance of a map file.  You may translate and rotate this entity. " +
	"You can use the replace keys to do parameter changes on the instance contents.  In a $ at the " +
	"beginning of a variable name.  Then just use the $variable name inside of the instance contents on any "+
	"value portion of a key/value pair."
[
	targetname(target_source) : "Fix Up Name" : : "The name that all entities will be fixed up with based upon the fix up style."
	file(instance_file) : "VMF Filename" : : "This indicates a map file relative to the map's file name"
	fixup_style(Choices) : "Entity Name Fix Up" : 0 : "Fixup style for instanced entity names.  Uses the 'Fix Up Name' field." =
	[
		0 : "Prefix"
		1 : "Postfix"
		2 : "None"
	]
	
	remap_vecline(choices) : "Remap Vector Lines" : 0 : "Remaps vecline keyvalues to the instance's origin. vecline is a type of vector which displays a line back to the entity's origin. This is often used on entities like phys_hinge for displaying an axis." =
	[
		0 : "No"
		1 : "Yes"
	]

	replace01(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace02(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace03(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace04(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace05(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace06(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace07(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace08(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace09(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace10(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
]

@PointClass size( -8 -8 -8, 8 8 8 ) = func_instance_parms : 
	"Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties " +
	"of this entity.  It will auto-populate it with the variables and allow you to indicate the variable type."
[
	parm1(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm2(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm3(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm4(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm5(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm6(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm7(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm8(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm9(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm10(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
]


@AutoVisGroup = "Entities"
[
	"Reflectives"
	[
		"func_reflective_glass"
	]
    "Cubemaps"
    [
        "env_cubemap"
	]
	"Decals"
    [
        "infodecal"
		"info_overlay"
    ]
    "Ambient Sounds"
    [
        "ambient_generic"
    ]
    "Soundscapes"
    [
        "env_soundscape"
        "env_soundscape_triggerable"
        "trigger_soundscape"
    ]
    "Light Sources"
    [
        "light"
        "light_spot"
        "light_environment"
        "light_glspot"
    ]
    "Spotlights"
    [
        "point_spotlight"
    ]
    "Particles"
    [
        "info_particle_system"
        "env_steam"
        "env_smokestack"
    ]
    "Sprites"
    [
        "env_sprite"
    ]
    "Ropes"
    [
        "move_rope"
        "keyframe_rope"
    ]
	"Paths"
	[
		"path_track"
		"path_corner"
	]
]
@AutoVisGroup = "Tool Brushes"
[
	"Visclusters"
	[
		"func_viscluster"
	]
	"Parallax OBB"
	[
		"parallax_obb"
	]
	"Detail Blockers"
	[
		"func_detail_blocker"
	]
]
@AutoVisGroup = "Props"
[
    "Statics"
    [
		"static_prop"
        "prop_static"
    ]
    "Dynamics"
    [
        "dynamic_prop"
        "prop_dynamic"
        "prop_dynamic_ornament"
        "prop_dynamic_override"
    ]
    "Physics"
    [
        "physics_prop"
        "prop_physics"
        "prop_physics_override"
    ]
]